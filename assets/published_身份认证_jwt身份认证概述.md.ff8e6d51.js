import{_ as o,o as e,c as s,Q as a}from"./chunks/framework.36bc40e2.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"published/身份认证/jwt身份认证概述.md","filePath":"published/身份认证/jwt身份认证概述.md","lastUpdated":1700015863000}'),l={name:"published/身份认证/jwt身份认证概述.md"},c=a(`<p><code>JWT</code>全称<code>JSON Web Token</code></p><h2 id="应用流程" tabindex="-1">应用流程 <a class="header-anchor" href="#应用流程" aria-label="Permalink to &quot;应用流程&quot;">​</a></h2><ol><li>客户端使用用户名和密码请求登录，服务端收到请求</li><li>验证用户名和密码正确后，后端通过<code>JWT</code>机制，将用户数据作为<code>JWT</code>的<code>Payload</code>，同时在前面拼接上一个<code>JWT Header</code>之后进行<code>Base64</code>编码，并进行签名，生成一个<code>token</code>，格式为<code>header.payload.signature</code>，返回给客户端</li><li>客户端后续的每次请求都需要携带<code>token</code>，携带在<code>HTTP Header Authorization</code>中</li><li>后端拿到客户端传递的<code>token</code>后，进行解密验证身份，验证其有效性，检查签名是否正确，是否过期，最后解析出<code>JWT Token</code>中的用户信息</li></ol><h2 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h2><ul><li><p>无状态，<code>token</code>机制在服务端不需要存储<code>session</code>信息，因为<code>token</code>自身包含了所有登录用户的信息，所以可以减轻服务端压力</p></li><li><p>分布式友好，由于<code>session</code>需要固定保存在一个地方，如果保存在本机，分布式系统中认证会失效，如果采用<code>redis</code>等统一保存<code>session</code>，系统复杂性会增加</p></li><li><p>支持跨域访问，跨域后不会存在信息丢失问题</p></li><li><p><code>CDN</code>友好，可以通过内容分发网络请求服务端的所有资料</p></li><li><p>移动端友好，当客户端是非浏览器平台时，<code>cookie</code>是不被支持的，此时采用<code>token</code>认证方式会简单很多</p></li><li><p>无需考虑<code>CSRF</code>(<code>Cross Site Request Forgery</code>跨站点请求伪造），<code>token</code>是开发者为了防范<code>csrf</code>而特别设计的令牌，浏览器不会自动添加到<code>headers</code>里，攻击者也无法访问用户的<code>token</code>，所以攻击者提交的表单无法通过服务器认证，也就无法形成攻击</p><p><code>CSRF</code>简述</p><ol><li>在一个浏览器中打开了两个标签页，其中一个页面通过窃取另一个页面的 <code>cookie</code> 来发送伪造的请求，<strong>因为<code>cookie</code> 是随着浏览器请求自动发送到服务端的</strong>，这个是<code>CSRF</code>攻击成功的核心原因</li><li><code>session</code>认证本质需要依赖<code>Cookie</code>，如果<code>cookie</code>被截获，用户很容易受到跨站请求伪造攻击</li><li><code>CSRF</code>无法直接窃取到用户的<code>Cookie,header</code>，仅仅是冒用<code>Cookie</code></li></ol></li></ul><h2 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h2><ul><li>不可控，由于<code>JWT</code>无状态，想要在<code>JWT</code> 有效期内废弃一个<code>JWT</code>或者更改它的权限的话，并不会立即生效，通常需要等到有效期过后才可以，如果要避免这个问题，需要把<code>JWT</code>存入<code>redis</code>等缓存，<code>JWT</code>失效的时候就删除这个<code>JWT</code>，每次验证的时候查询一下<code>JWT</code>在不在<code>redis</code>，但是这样就增加了成本和系统复杂度</li><li><code>token</code>续签不方便，<code>JWT</code>本身<code>payload</code>参数当中携带<code>exp</code>参数表示过期时间，<code>payload</code>修改之后签名也需要修改，所以需要重新生成一个<code>JWT</code></li><li><code>JWT</code>令牌一般会比较长，如果是性能极度敏感的话需要在意这一点</li></ul><h2 id="组成" tabindex="-1">组成 <a class="header-anchor" href="#组成" aria-label="Permalink to &quot;组成&quot;">​</a></h2><p><code>JWT</code>生成的<code>Token</code>由三部分组成：<code>header.payload.signature</code>，通俗地说，<code>JWT</code>的本质是一个字符串，将用户信息保存到一个<code>Json</code>字符串中，然后进行编码后得到一个<code>JWT token</code>，并且这个<code>JWT token</code>带有签名信息，接收后可以校验是否被篡改，所以可以用于在各方之间安全地将信息作为<code>Json</code>对象传输</p><ul><li><p><code>header</code></p><ul><li><code>alg</code>：指定<code>signature</code>采用的加密算法，默认是<code>HS256(HMAC SHA256)</code>，对称加密（加密和解密的密钥相同）</li><li><code>typ</code>：固定值，通常是<code>JWT</code></li><li>通常值是<code>{&quot;alg&quot;: &quot;HS256&quot;, &quot;typ&quot;: &quot;JWT&quot;}</code>, 通过<code>base64Url</code>算法进行编码之后进行拼接</li></ul></li><li><p><code>payload</code></p><ul><li><p>用户<code>id</code>和<code>name</code></p></li><li><p>默认携带<code>iat</code>，令牌签发时间（时间戳）</p></li><li><p><code>exp</code>设置令牌过期时间</p></li><li><p>参数一般形式如下，通过<code>base64Url</code>算法进行编码与<code>header</code>进行拼接，<strong>默认情况下<code>JWT</code>是未加密的，因为只是采用<code>base64</code>算法，拿到<code>JWT</code>字符串后可以转换回原本的<code>JSON</code>数据，任何人都可以解读其内容，因此不要构建隐私信息字段，比如用户的密码一定不能保存到<code>JWT</code>中，<code>JWT</code>只是适合在网络中传输一些非敏感的信息</strong>，要传递一些敏感数据的话需要使用一些<code>AES</code>或者其他类型的算法，尽量加上一些<code>salt</code>进行加密<code>payload</code></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;sub&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;1234567890&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Helen&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;admin&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;sub&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;1234567890&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Helen&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;admin&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li></ul></li><li><p><code>signature</code></p><ul><li>设置一个<code>secretKey</code>，通过将前两个结果合并后进行<code>HS256</code>算法，<code>signature = HS256(base64Url(header)+&#39;.&#39;+base64Url(payload),secretKey)</code></li><li><code>secreKey</code>一定不能暴露，因为可以颁发<code>token</code>，也可以解密</li></ul></li></ul><h2 id="跨域资源共享" tabindex="-1">跨域资源共享 <a class="header-anchor" href="#跨域资源共享" aria-label="Permalink to &quot;跨域资源共享&quot;">​</a></h2><p>是一种基于 <code>HTTP</code>头的机制，该机制主要是为了避免跨站脚本攻击而存在</p><p>实际网站开发过程当中需要从<code>A</code>网站访问到另外一个网站<code>B</code>，就需要通过允许服务器标示除了它自己以外的其他源(域、协议或端口），使得浏览器允许这些源访问加载自己的资源，服务器需要返回一个<code>HTTP Header Access-Control-Allow-Origin: *</code> 表明，该资源可以被<strong>任意</strong>外源访问，这样浏览器才会正常加载返回的数据</p><p>但是当携带<code>cookie</code>进行访问的时候就不能返回一个<code>Header</code>头表示允许被任意外源访问</p><ul><li>服务器<strong>不能</strong>将 <code>Access-Control-Allow-Origin</code> 的值设为通配符“<code>*</code>”，而应将其设置为特定的域，如：<code>Access-Control-Allow-Origin: https://example.com</code>，如果值被设置为<code>*</code>，请求会失败，如歌设置为具体的域请求成功</li><li>服务器<strong>不能</strong>将 <code>Access-Control-Allow-Headers</code> 的值设为通配符“<code>*</code>”，而应将其设置为标头名称的列表，如：<code>Access-Control-Allow-Headers: X-PINGOTHER, Content-Type</code></li><li>服务器<strong>不能</strong>将 <code>Access-Control-Allow-Methods</code> 的值设为通配符“<code>*</code>”，而应将其设置为特定请求方法名称的列表，如：<code>Access-Control-Allow-Methods: POST, GET</code></li></ul><p>详情参考<code>Mozilla</code>对跨域资源共享的定义</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS</span></span></code></pre></div><h2 id="python实现" tabindex="-1"><code>python</code>实现 <a class="header-anchor" href="#python实现" aria-label="Permalink to &quot;\`python\`实现&quot;">​</a></h2><p>依赖项目<code>pyjwt</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">https://github.com/jpadilla/pyjwt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">https://github.com/jpadilla/pyjwt</span></span></code></pre></div><p>安装</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pyjwt</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pyjwt</span></span></code></pre></div><p>使用</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&gt;&gt;&gt; </span><span style="color:#B392F0;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">jwt</span></span>
<span class="line"><span style="color:#E1E4E8;">&gt;&gt;&gt; </span><span style="color:#B392F0;">encoded</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">jwt.encode</span><span style="color:#E1E4E8;">({&quot;some&quot;: &quot;payload&quot;}, &quot;secret&quot;, algorithm=&quot;HS256&quot;)</span></span>
<span class="line"><span style="color:#E1E4E8;">&gt;&gt;&gt; </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(encoded)</span></span>
<span class="line"><span style="color:#B392F0;">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzb21lIjoicGF5bG9hZCJ9.4twFt5NiznN84AWoo1d7KO1T_yoc0Z6XOpOVswacPZg</span></span>
<span class="line"><span style="color:#E1E4E8;">&gt;&gt;&gt; </span><span style="color:#B392F0;">jwt.decode(encoded,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;secret&quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">algorithms=[&quot;HS256&quot;]</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#B392F0;">&#39;some&#39;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;payload&#39;}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&gt;&gt;&gt; </span><span style="color:#6F42C1;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">jwt</span></span>
<span class="line"><span style="color:#24292E;">&gt;&gt;&gt; </span><span style="color:#6F42C1;">encoded</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">jwt.encode</span><span style="color:#24292E;">({&quot;some&quot;: &quot;payload&quot;}, &quot;secret&quot;, algorithm=&quot;HS256&quot;)</span></span>
<span class="line"><span style="color:#24292E;">&gt;&gt;&gt; </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(encoded)</span></span>
<span class="line"><span style="color:#6F42C1;">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzb21lIjoicGF5bG9hZCJ9.4twFt5NiznN84AWoo1d7KO1T_yoc0Z6XOpOVswacPZg</span></span>
<span class="line"><span style="color:#24292E;">&gt;&gt;&gt; </span><span style="color:#6F42C1;">jwt.decode(encoded,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;secret&quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">algorithms=[&quot;HS256&quot;]</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#6F42C1;">&#39;some&#39;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;payload&#39;}</span></span></code></pre></div><h2 id="参考阅读" tabindex="-1">参考阅读 <a class="header-anchor" href="#参考阅读" aria-label="Permalink to &quot;参考阅读&quot;">​</a></h2><p><a href="https://juejin.cn/post/7220324089265111100" target="_blank" rel="noreferrer">掘金-<code>JWT</code>与<code>Token</code>详解</a></p><p><a href="https://juejin.cn/post/7113802655381585927" target="_blank" rel="noreferrer">掘金-<code>JWT</code>详解</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS" target="_blank" rel="noreferrer"><code>Mozilla </code>跨源资源共享<code>CORS</code></a></p>`,28),n=[c];function p(t,d,r,i,y,u){return e(),s("div",null,n)}const g=o(l,[["render",p]]);export{h as __pageData,g as default};
