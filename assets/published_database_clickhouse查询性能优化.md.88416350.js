import{_ as s,o as a,c as o,Q as n}from"./chunks/framework.ec8f7e8e.js";const l="/assets/clickhouse_index.da31db5d.png",u=JSON.parse('{"title":"Clickhouse查询优化","description":"","frontmatter":{},"headers":[],"relativePath":"published/database/clickhouse查询性能优化.md","filePath":"published/database/clickhouse查询性能优化.md"}'),e={name:"published/database/clickhouse查询性能优化.md"},p=n(`<h1 id="clickhouse查询优化" tabindex="-1">Clickhouse查询优化 <a class="header-anchor" href="#clickhouse查询优化" aria-label="Permalink to &quot;Clickhouse查询优化&quot;">​</a></h1><p>虽然<code>clickhouse</code>在大数据量查询速度会比关系型数据库如<code>mysql</code>或者<code>postrges</code>快很多，但还是有很多地方需要去了解和配置，达到提供最低资源获取最大产出</p><p>以下内容主要来源于<a href="https://clickhouse.com/docs/zh/" target="_blank" rel="noreferrer"><code>clickhouse</code>官方中文文档</a></p><h2 id="索引设计" tabindex="-1">索引设计 <a class="header-anchor" href="#索引设计" aria-label="Permalink to &quot;索引设计&quot;">​</a></h2><h4 id="关系型数据库设计" tabindex="-1">关系型数据库设计 <a class="header-anchor" href="#关系型数据库设计" aria-label="Permalink to &quot;关系型数据库设计&quot;">​</a></h4><ul><li><p>主索引采用<code>B+Tree</code>的数据结构进行快速定位所在行，搜索一个条目的平均时间复杂度为<code>O(log2n)</code>，对于一个有<code>1000</code>万行的表，这意味着需要<code>23</code>步来定位任何索引条目</p></li><li><p>额外的磁盘和内存开销</p></li><li><p>向表中添加新行和向索引中添加条目时更高的插入成本(有时还需要重新平衡<code>B-Tree</code>)</p></li></ul><h4 id="clickhouse索引" tabindex="-1"><code>clickhouse</code>索引 <a class="header-anchor" href="#clickhouse索引" aria-label="Permalink to &quot;\`clickhouse\`索引&quot;">​</a></h4><ul><li>按照主键列的顺序将一组行存储在磁盘，一组数据行（称为颗粒（<code>granule</code>），大小是<code>index_granularity</code>定义配置的，默认<code>8192</code>）构建一个索引条目，即稀疏索引</li><li>稀疏主索引允许它快速(通过对索引项进行二分查找)识别可能匹配查询的行组，然后潜在的匹配行组(颗粒)以并行的方式被加载到<code>ClickHouse</code>引擎中，以便找到匹配的行</li></ul><h2 id="clickhouse的颗粒与查询" tabindex="-1"><code>Clickhouse</code>的颗粒与查询 <a class="header-anchor" href="#clickhouse的颗粒与查询" aria-label="Permalink to &quot;\`Clickhouse\`的颗粒与查询&quot;">​</a></h2><p>出于数据处理的目的，表的列值在逻辑上被划分为多个颗粒，颗粒是流进<code>ClickHouse</code>进行数据处理的最小的不可分割数据集，这意味着，<code>ClickHouse</code>不是读取单独的行，而是始终读取(以流方式并并行地)整个行组（颗粒）。</p><p>下表的建表语句<code>copy from</code><a href="https://clickhouse.com/docs/zh/guides/improving-query-performance/sparse-primary-indexes" target="_blank" rel="noreferrer"><strong><code>ClickHouse</code>主键索引最佳实践</strong></a></p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">CREATE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">TABLE</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hits_UserID_URL</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`UserID\`</span><span style="color:#E1E4E8;"> UInt32,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`URL\`</span><span style="color:#E1E4E8;"> String,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`EventTime\`</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">DateTime</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">ENGINE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> MergeTree</span></span>
<span class="line"><span style="color:#F97583;">PRIMARY KEY</span><span style="color:#E1E4E8;"> (UserID, </span><span style="color:#F97583;">URL</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">ORDER BY</span><span style="color:#E1E4E8;"> (UserID, </span><span style="color:#F97583;">URL</span><span style="color:#E1E4E8;">, EventTime)</span></span>
<span class="line"><span style="color:#E1E4E8;">SETTINGS index_granularity </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8192</span><span style="color:#E1E4E8;">, index_granularity_bytes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">CREATE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">TABLE</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hits_UserID_URL</span></span>
<span class="line"><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`UserID\`</span><span style="color:#24292E;"> UInt32,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`URL\`</span><span style="color:#24292E;"> String,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`EventTime\`</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">DateTime</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">ENGINE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MergeTree</span></span>
<span class="line"><span style="color:#D73A49;">PRIMARY KEY</span><span style="color:#24292E;"> (UserID, </span><span style="color:#D73A49;">URL</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">ORDER BY</span><span style="color:#24292E;"> (UserID, </span><span style="color:#D73A49;">URL</span><span style="color:#24292E;">, EventTime)</span></span>
<span class="line"><span style="color:#24292E;">SETTINGS index_granularity </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8192</span><span style="color:#24292E;">, index_granularity_bytes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span></code></pre></div><p>如下图所示，每8192行数属于一个颗粒</p><p><img src="`+l+`" alt="clickhouse_index.png"></p><p>其中主索引是<code>UserID</code></p><p><strong>查询第一阶段：颗粒选择</strong></p><ul><li><code>Clickhouse</code>通过稀疏主索引来快速(二分查找算法)选择可能包含匹配查询的行的颗粒。</li></ul><p>查询<strong>第二阶段：数据读取</strong></p><ul><li><code>ClickHouse</code>定位所选的颗粒，以便将它们的所有行流到<code>ClickHouse</code>引擎中，以便找到实际匹配查询的行</li></ul><h2 id="数据表主键以及排序字段优化" tabindex="-1">数据表主键以及排序字段优化 <a class="header-anchor" href="#数据表主键以及排序字段优化" aria-label="Permalink to &quot;数据表主键以及排序字段优化&quot;">​</a></h2><h4 id="基数概念" tabindex="-1">基数概念 <a class="header-anchor" href="#基数概念" aria-label="Permalink to &quot;基数概念&quot;">​</a></h4><ul><li><p>数据库中某个表的某个列中不重复行的总个数</p></li><li><p>对于<code>mysql</code>等关系型数据库，对于索引列，基数越大，查询效果越好，基数越小，查询效果越差，理想的索引列满足： 基数/实际行=1，比如<code>user</code>表当中如果<code>username</code>是全表唯一的，那么在<code>username</code>上面应用的索引在命中索引前提下查询效果最好</p></li></ul><h4 id="clickhouse表" tabindex="-1"><code>clickhouse</code>表 <a class="header-anchor" href="#clickhouse表" aria-label="Permalink to &quot;\`clickhouse\`表&quot;">​</a></h4><p>上表中指定的主键是<code>(UserID, URL)</code>，排序键是<code>(UserID, URL, EventTime)</code>，注意，排序键指定之后不能更改排序键的值，排序键也不能是空，主键必须是排序键的前缀</p><p>字段基数的排列顺序是<code>UserID</code>,<code>URL</code>，<code>EventTime</code>，即<code>UserID</code>去重数量不多（低基数），<code>URL</code>去重之后数量较多，<code>EventTime</code>去重之后数量最多(高基数)</p><p>所以最佳的主键设计是<code>(UserID, URL)</code>，在<code>Clickhouse</code>的索引文件当中就是先按照相同<code>UserID</code>排序，具有相同的<code>UserID</code>情况下再按照<code>URL</code>排序</p><p>主键或者排序键的最佳设计就是保持<strong>前缀主键低基数</strong>，在这样的情况下会有最少的颗粒流入<code>Clickhouse</code>引擎</p><h4 id="实际应用的限制" tabindex="-1">实际应用的限制 <a class="header-anchor" href="#实际应用的限制" aria-label="Permalink to &quot;实际应用的限制&quot;">​</a></h4><p>业务场景中会经常要求按照时间倒序排列的需求，排序键就定义为<code>ORDER BY EventTime DESC</code> ，这样就违反了<strong>前缀主键低基数</strong>的优化设计了，但是查询的时候不用在<code>sql</code>语句当中显式指定时间倒排了，所以在这种情况下就需要使用到<code>Clickhouse</code>的跳数索引</p><h2 id="clickhouse跳数索引类型" tabindex="-1"><code>Clickhouse</code>跳数索引类型 <a class="header-anchor" href="#clickhouse跳数索引类型" aria-label="Permalink to &quot;\`Clickhouse\`跳数索引类型&quot;">​</a></h2><p>以下文档<code>copy from clickhouse</code>的章节<a href="https://clickhouse.com/docs/zh/guides/improving-query-performance/skipping-indexes" target="_blank" rel="noreferrer"><strong>深入理解<code>ClickHouse</code>跳数索引</strong></a></p><ul><li><p><code>minmax</code></p><p>这种轻量级索引类型不需要参数。它存储每个块的索引表达式的最小值和最大值(如果表达式是一个元组，它分别存储元组元素的每个成员的值)。对于倾向于按值松散排序的列，这种类型非常理想。在查询处理期间，这种索引类型的开销通常是最小的。</p><p>这种类型的索引只适用于标量或元组表达式——索引永远不适用于返回数组或<code>map</code>数据类型的表达式。</p></li><li><p><code>set</code></p><p>这种轻量级索引类型接受单个参数<code>max_size</code>，即每个块的值集(0允许无限数量的离散值)。这个集合包含块中的所有值(如果值的数量超过<code>max_size</code>则为空)。这种索引类型适用于每组颗粒中基数较低(本质上是“聚集在一起”)但总体基数较高的列。</p><p>该索引的成本、性能和有效性取决于块中的基数。如果每个块包含大量惟一值，那么针对大型索引集计算查询条件将非常昂贵，或者由于索引超过<code>max_size</code>而为空，因此索引将不应用。</p></li><li><p><code>Bloom Filter Types</code></p><p><code>Bloom filter</code>是一种数据结构，它允许对集合成员进行高效的是否存在测试，但代价是有轻微的误报。在跳数索引的使用场景，假阳性不是一个大问题，因为惟一的问题只是读取一些不必要的块。潜在的假阳性意味着索引表达式应该为真，否则有效的数据可能会被跳过。</p><p>因为<code>Bloom filter</code>可以更有效地处理大量离散值的测试，所以它们可以适用于大量条件表达式判断的场景。特别的是<code>Bloom filter</code>索引可以应用于数组，数组中的每个值都被测试，也可以应用于<code>map</code>，通过使用<code>mapKeys</code>或<code>mapValues</code>函数将键或值转换为数组。</p><p>有三种基于<code>Bloom</code>过滤器的数据跳数索引类型：</p><ul><li>基本的<code>bloom_filter</code>接受一个可选参数，该参数表示在0到1之间允许的“假阳性”率(如果未指定，则使用<code>0.025</code>)。</li><li>更专业的<code>tokenbf_v1</code>。需要三个参数，用来优化布隆过滤器：（1）过滤器的大小字节(大过滤器有更少的假阳性，有更高的存储成本)，（2）哈希函数的个数(更多的散列函数可以减少假阳性)。（3）布隆过滤器哈希函数的种子 。此索引仅适用于<code>String、FixedString</code>和<code>Map</code>类型的数据。输入表达式被分割为由非字母数字字符分隔的字符序列。例如，列值<code>This is a candidate for a &quot;full text&quot; search</code>将被分割为<code>This</code> <code>is</code> <code>a</code> <code>candidate</code> <code>for</code> <code>full</code> <code>text</code> <code>search</code>。它用于<code>LIKE、EQUALS、in、hasToken()</code>和类似的长字符串中单词和其他值的搜索。例如，一种可能的用途是在非结构的应用程序日志行列中搜索少量的类名或行号。</li><li>更专业的<code>ngrambf_v1</code>。该索引的功能与<code>tokenbf_v1</code>相同。在<code>Bloom filter</code>设置之前需要一个额外的参数，即要索引的<code>ngram</code>的大小。一个<code>ngram</code>是长度为n的任何字符串，比如如果n是4，<code>A short string</code>会被分割为<code>A sh\`\` sho</code>, <code>shor</code>, <code>hort</code>, <code>ort s</code>, <code>or st</code>, <code>r str</code>, <code> stri</code>, <code>trin</code>, <code>ring</code>。这个索引对于文本搜索也很有用，特别是没有单词间断的语言，比如中文。</li></ul></li></ul><h2 id="高基数字段采用跳数索引优化" tabindex="-1">高基数字段采用跳数索引优化 <a class="header-anchor" href="#高基数字段采用跳数索引优化" aria-label="Permalink to &quot;高基数字段采用跳数索引优化&quot;">​</a></h2><p>高基数字段适合采用<code>bloom filter</code>跳数索引加快查询速度</p><p><code>Bloom filter</code>解释，由一个超长的二进制位数组和一系列的哈希函数组成，二进制位数组初始全部为0，当给定一个待查询的元素时，这个元素会被一系列哈希函数计算映射出一系列的值，所有的值在位数组的偏移量处置为1，同样是这个元素经过哈希函数计算后得到所有的偏移位置，若这些位置全都为1，则判断这个元素在这个集合中，若有一个不为1，则判断这个元素不在这个集合中。</p><p>更详细的解释参考文档<a href="https://www.cnblogs.com/lazyegg/p/12857374.html" target="_blank" rel="noreferrer">深入理解布隆过滤器</a>以及<a href="https://zhuanlan.zhihu.com/p/50587308" target="_blank" rel="noreferrer">布隆过滤器<code>Bloom Filter</code>详解</a></p><p>如果想自定义过滤器的输入参数和假阳性概率，可以访问如下地址获取对应的参数<a href="https://hur.st/bloomfilter/" target="_blank" rel="noreferrer">布隆过滤器计算网址</a></p><p>调整建表语句如下，</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">CREATE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">TABLE</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hits_UserID_URL</span></span>
<span class="line"><span style="color:#E1E4E8;">(    </span></span>
<span class="line"><span style="color:#6A737D;">--  加入\`Id\`字段，采用雪花算法生成</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`Id\`</span><span style="color:#E1E4E8;"> UInt64,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`UserID\`</span><span style="color:#E1E4E8;"> UInt32,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`URL\`</span><span style="color:#E1E4E8;"> String,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`EventTime\`</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">DateTime</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">--  加入布隆过滤器跳数索引，采用clickhouse提供的默认bloom_filter函数</span></span>
<span class="line"><span style="color:#6A737D;">--  配置允许假阳性概率为0.001，官方默认值是0.025</span></span>
<span class="line"><span style="color:#6A737D;">--  概率越小，假阳性概率越低，查询时候会有越少的颗粒发送给clickhouse引擎，所以查询速度更快，但是索引占用的磁盘空间也越多</span></span>
<span class="line"><span style="color:#6A737D;">--  每个索引块由颗粒（granule）组成, 例如，如果主表索引粒度为8192行，GRANULARITY为4，则每个索引“块”将为32768行</span></span>
<span class="line"><span style="color:#6A737D;">--    GRANULARITY 参数配置为1就可以</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">INDEX</span><span style="color:#E1E4E8;"> skip_index_url </span><span style="color:#F97583;">URL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">TYPE</span><span style="color:#E1E4E8;"> bloom_filter(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">001</span><span style="color:#E1E4E8;">) GRANULARITY </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">ENGINE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> MergeTree</span></span>
<span class="line"><span style="color:#F97583;">ORDER BY</span><span style="color:#E1E4E8;"> Id</span></span>
<span class="line"><span style="color:#E1E4E8;">SETTINGS index_granularity </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8192</span><span style="color:#E1E4E8;">, index_granularity_bytes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">CREATE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">TABLE</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hits_UserID_URL</span></span>
<span class="line"><span style="color:#24292E;">(    </span></span>
<span class="line"><span style="color:#6A737D;">--  加入\`Id\`字段，采用雪花算法生成</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`Id\`</span><span style="color:#24292E;"> UInt64,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`UserID\`</span><span style="color:#24292E;"> UInt32,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`URL\`</span><span style="color:#24292E;"> String,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`EventTime\`</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">DateTime</span><span style="color:#24292E;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">--  加入布隆过滤器跳数索引，采用clickhouse提供的默认bloom_filter函数</span></span>
<span class="line"><span style="color:#6A737D;">--  配置允许假阳性概率为0.001，官方默认值是0.025</span></span>
<span class="line"><span style="color:#6A737D;">--  概率越小，假阳性概率越低，查询时候会有越少的颗粒发送给clickhouse引擎，所以查询速度更快，但是索引占用的磁盘空间也越多</span></span>
<span class="line"><span style="color:#6A737D;">--  每个索引块由颗粒（granule）组成, 例如，如果主表索引粒度为8192行，GRANULARITY为4，则每个索引“块”将为32768行</span></span>
<span class="line"><span style="color:#6A737D;">--    GRANULARITY 参数配置为1就可以</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">INDEX</span><span style="color:#24292E;"> skip_index_url </span><span style="color:#D73A49;">URL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">TYPE</span><span style="color:#24292E;"> bloom_filter(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">001</span><span style="color:#24292E;">) GRANULARITY </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">ENGINE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MergeTree</span></span>
<span class="line"><span style="color:#D73A49;">ORDER BY</span><span style="color:#24292E;"> Id</span></span>
<span class="line"><span style="color:#24292E;">SETTINGS index_granularity </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8192</span><span style="color:#24292E;">, index_granularity_bytes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span></code></pre></div><h2 id="低基数字段优化" tabindex="-1">低基数字段优化 <a class="header-anchor" href="#低基数字段优化" aria-label="Permalink to &quot;低基数字段优化&quot;">​</a></h2><h4 id="描述" tabindex="-1">描述 <a class="header-anchor" href="#描述" aria-label="Permalink to &quot;描述&quot;">​</a></h4><p>该段描述摘抄自<a href="https://clickhouse.com/docs/zh/sql-reference/data-types/lowcardinality" target="_blank" rel="noreferrer"><code>clickhouse</code>官方中文文档低基数类型</a></p><p><code>LowCardinality</code> 是一种改变数据存储和数据处理方法的概念，<code>ClickHouse</code>会把 <code>LowCardinality</code> 所在的列进行字典编码，对很多应用来说，处理字典编码的数据可以显著的增加查询速度。字典编码可以参考<a href="https://itcn.blog/p/1149650246.html" target="_blank" rel="noreferrer">详解<code>LZ77</code>字典编码压缩和解压缩流程</a></p><p>使用 <code>LowCarditality</code> 数据类型的效率依赖于数据的多样性，如果一个字典包含少于10000个不同的值，那么<code>ClickHouse</code>可以进行更高效的数据存储和处理，反之如果字典多于10000，效率会表现的更差。</p><p>当使用字符类型的时候，可以考虑使用 <code>LowCardinality</code> 代替<code>Enum</code>字段， <code>LowCardinality</code> 通常更加灵活和高效。</p><h4 id="具体操作" tabindex="-1">具体操作 <a class="header-anchor" href="#具体操作" aria-label="Permalink to &quot;具体操作&quot;">​</a></h4><p>现在假设需要在表里面加入<code>Country</code>字段，全世界总共国家总数的基数不大，如果可以的话存储为<code>UInt8</code>，其他低基数枚举也尽量存储为<code>Int</code>类型</p><p>如果<code>Country</code>字段是<code>String</code>类型，那么需要调整建表语句如下</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">CREATE</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">TABLE</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hits_UserID_URL</span></span>
<span class="line"><span style="color:#E1E4E8;">(    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`Id\`</span><span style="color:#E1E4E8;"> UInt64,</span></span>
<span class="line"><span style="color:#6A737D;">--  没有优化的时候, 类型是String，字段定义为\`Country\` String,</span></span>
<span class="line"><span style="color:#6A737D;">--  优化的时候直接加上一个LowCardinality函数</span></span>
<span class="line"><span style="color:#6A737D;">--  在已经有的表上面修改的时候不需要改动其他代码，对python, rust，golang或者其他语言的客户端代码来说，\`Country\`字段就是String</span></span>
<span class="line"><span style="color:#6A737D;">--  加上LowCardinality之后，查询如果用到Country，加速效果非常明显</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`Country\`</span><span style="color:#E1E4E8;"> LowCardinality(String),</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`UserID\`</span><span style="color:#E1E4E8;"> UInt32,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`URL\`</span><span style="color:#E1E4E8;"> String,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`EventTime\`</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">DateTime</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">INDEX</span><span style="color:#E1E4E8;"> skip_index_url </span><span style="color:#F97583;">URL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">TYPE</span><span style="color:#E1E4E8;"> bloom_filter(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">001</span><span style="color:#E1E4E8;">) GRANULARITY </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">ENGINE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> MergeTree</span></span>
<span class="line"><span style="color:#F97583;">ORDER BY</span><span style="color:#E1E4E8;"> Id</span></span>
<span class="line"><span style="color:#E1E4E8;">SETTINGS index_granularity </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8192</span><span style="color:#E1E4E8;">, index_granularity_bytes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">CREATE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">TABLE</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hits_UserID_URL</span></span>
<span class="line"><span style="color:#24292E;">(    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`Id\`</span><span style="color:#24292E;"> UInt64,</span></span>
<span class="line"><span style="color:#6A737D;">--  没有优化的时候, 类型是String，字段定义为\`Country\` String,</span></span>
<span class="line"><span style="color:#6A737D;">--  优化的时候直接加上一个LowCardinality函数</span></span>
<span class="line"><span style="color:#6A737D;">--  在已经有的表上面修改的时候不需要改动其他代码，对python, rust，golang或者其他语言的客户端代码来说，\`Country\`字段就是String</span></span>
<span class="line"><span style="color:#6A737D;">--  加上LowCardinality之后，查询如果用到Country，加速效果非常明显</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`Country\`</span><span style="color:#24292E;"> LowCardinality(String),</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`UserID\`</span><span style="color:#24292E;"> UInt32,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`URL\`</span><span style="color:#24292E;"> String,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`EventTime\`</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">DateTime</span><span style="color:#24292E;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">INDEX</span><span style="color:#24292E;"> skip_index_url </span><span style="color:#D73A49;">URL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">TYPE</span><span style="color:#24292E;"> bloom_filter(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">001</span><span style="color:#24292E;">) GRANULARITY </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">ENGINE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MergeTree</span></span>
<span class="line"><span style="color:#D73A49;">ORDER BY</span><span style="color:#24292E;"> Id</span></span>
<span class="line"><span style="color:#24292E;">SETTINGS index_granularity </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8192</span><span style="color:#24292E;">, index_granularity_bytes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span></code></pre></div><h4 id="注意点" tabindex="-1">注意点 <a class="header-anchor" href="#注意点" aria-label="Permalink to &quot;注意点&quot;">​</a></h4><p><code>LowCardinality</code>所包含的字段不能是<code>Int</code>，但是配置文件中有个参数可以改变这个情况</p><p>对应配置文档如下</p><p>配置参数是<code>allow_suspicious_low_cardinality_types</code></p><p>允许或限制将与固定大小为 8 字节或更少的数据类型一起使用：数字数据类型和<code>FixedString(8_bytes_or_less)</code>.</p><p>对于小的固定值，使用 of<code>LowCardinality</code>通常是低效的，因为 <code>ClickHouse</code> 为每一行存储一个数字索引。因此：</p><ul><li>磁盘空间使用率可能会上升。</li><li>RAM 消耗可能更高，具体取决于字典大小。</li><li>由于额外的编码/编码操作，某些功能可能会运行得更慢。</li></ul><p>由于上述所有原因， <code>MergeTree -engine</code>表中的合并时间可能会增加。</p><p>所以遵守<code>Clickhouse</code>的建议，数字类型的数据就不使用<code>LowCardinality</code>参数了</p><h2 id="服务器配置参数优化" tabindex="-1">服务器配置参数优化 <a class="header-anchor" href="#服务器配置参数优化" aria-label="Permalink to &quot;服务器配置参数优化&quot;">​</a></h2><p>如果字段索引，排序，低基数字段优化等方法都使用了，可以尝试修改一下服务器的硬件配置参数，目前发现修改服务器参数配置的查询加速效果不太明显，但是有总比没有好一点</p><p>优化项包括使用更新的内核，如果是旧内核禁止使用透明大页缓存，不要使用<code>FAT-32</code>或者<code>exFAT</code>文件系统等，从<a href="https://clickhouse.com/docs/en/operations/tips" target="_blank" rel="noreferrer">官方文档的服务器参数优化</a>看，其实感觉真的需要去配置的只有<code>CPU</code>和内存方面的修改，其他的都只是一些不怎么会遇到的情况</p><h4 id="cpu参数" tabindex="-1"><code>CPU</code>参数 <a class="header-anchor" href="#cpu参数" aria-label="Permalink to &quot;\`CPU\`参数&quot;">​</a></h4><p>很多老式的<code>CPU</code>由于没有睿频加速技术，所以<code>CPU</code>基准频率就是最高频率，修改本参数意义不大</p><p><code>clickhouse</code>极大的依赖<code>CPU</code>运算和顺序磁盘<code>IO</code>的速度，所以为<code>clickhouse</code>配置<code>CPU</code>高性能模式是应该的</p><p><code>linux</code>的<code>cpu</code>共有以下几种模式</p><ul><li><code>performance</code>: 固定工作在其支持的最高运行频率上</li><li><code>powersave</code>: 省电模式，固定工作在其支持的最低运行频率上</li><li><code>Userspace</code>: 系统将变频策略的决策权交给了用户态应用程序</li><li><code>ondemand</code>: 完全在内核态下工作并且能够以更加细粒度的时间间隔对系统负载情况进行采样分析并控制频率</li><li><code>conservative</code>: 在不影响系统性能的前提下做到更高效的节能，降频比较缓慢保守</li></ul><p>查看当前<code>cpu</code>运行模式</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cat</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/sys/devices/system/cpu/cpu</span><span style="color:#79B8FF;">*</span><span style="color:#9ECBFF;">/cpufreq/scaling_governor</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cat</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/sys/devices/system/cpu/cpu</span><span style="color:#005CC5;">*</span><span style="color:#032F62;">/cpufreq/scaling_governor</span></span></code></pre></div><p>查看<code>cpu</code>实际运转频率</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cat</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/proc/cpuinfo</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">grep</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Hz</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cat</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/proc/cpuinfo</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grep</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Hz</span></span></code></pre></div><p>设置为性能模式</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cpupower</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">frequency-set</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-g</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">performance</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cpupower</span><span style="color:#24292E;"> </span><span style="color:#032F62;">frequency-set</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-g</span><span style="color:#24292E;"> </span><span style="color:#032F62;">performance</span></span></code></pre></div><p>或者如下命令</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;performance&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tee</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/sys/devices/system/cpu/cpu</span><span style="color:#79B8FF;">*</span><span style="color:#9ECBFF;">/cpufreq/scaling_governor</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;performance&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tee</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/sys/devices/system/cpu/cpu</span><span style="color:#005CC5;">*</span><span style="color:#032F62;">/cpufreq/scaling_governor</span></span></code></pre></div><p>修改完成之后再次查看<code>CPU</code>频率</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cat</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/proc/cpuinfo</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">grep</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Hz</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cat</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/proc/cpuinfo</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grep</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Hz</span></span></code></pre></div><h4 id="overcommit-memory配置优化" tabindex="-1"><code>overcommit_memory</code>配置优化 <a class="header-anchor" href="#overcommit-memory配置优化" aria-label="Permalink to &quot;\`overcommit_memory\`配置优化&quot;">​</a></h4><p>依据官方文档的描述，在机器内存小于<code>16G</code>的情况下，如果开启此配置，会导致很多的内存异常，所以如果机器内存小，就跳过此项配置</p><p><code>overcommit_memory</code>配置是否允许过量使用内存，该参数存在原因是由于内存申请和实际内存分配使用上面存在差异，可能申请了<code>10G</code>内存，最终只使用了<code>8G</code>，存在闲置内存，程序在申请内存的时候也不是马上使用全部申请的内存，可能当真正使用的时候系统已经收回了一些内存</p><p>参数<code>/proc/sys/vm/overcommit_memory</code>可以控制进程对内存过量使用的应对策略，<code>overcommit_memory</code>可选值有以下三个</p><ul><li><p>0: 允许进程轻微过量使用内存，但对于大量过载请求则不允许，也就是当内存消耗过大就是触发<code>OOM killer（Out Of Memory killer， 系统内存耗尽的情况下发生，干掉进程以求释放一些内存）</code></p></li><li><p>1: 永远允许进程<code>overcommit</code>，不会触发<code>OOM killer</code></p></li><li><p>2: 永远禁止<code>overcommit</code>，不会触发<code>OOM killer</code></p></li></ul><p>该参数推荐配置为0</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tee</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/proc/sys/vm/overcommit_memory</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tee</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/proc/sys/vm/overcommit_memory</span></span></code></pre></div><h4 id="使用docker时候的优化" tabindex="-1">使用<code>docker</code>时候的优化 <a class="header-anchor" href="#使用docker时候的优化" aria-label="Permalink to &quot;使用\`docker\`时候的优化&quot;">​</a></h4><p>依据<code>clickhouse</code>在<code>github</code>仓库上面<a href="https://github.com/ClickHouse/ClickHouse/tree/master/docker/server" target="_blank" rel="noreferrer"><code>docker</code>模块的文档描述</a>，<code>clickhouse</code>存在一些高级功能，需要允许某些<code>linux</code>的<code>capabilities</code></p><p><code>docker</code>执行命令如下，发现新增了如下功能</p><ul><li><code>SYS_NICE</code>：<a href="https://clickhouse.com/docs/en/operations/settings/settings/#setting-os-thread-priority" target="_blank" rel="noreferrer">参考</a>, 允许修改进程的<code>nice</code>值，该值会影响<code>CPU</code>时间分片的进程调度，提高<code>clickhouse</code>查询语句的调度优先级</li><li><code>NET_ADMIN</code>： <a href="https://clickhouse.com/docs/en/operations/system-tables/#system-tables-sources-of-system-metrics" target="_blank" rel="noreferrer">参考</a>, 用于收集针对查询的<code>CPU</code>和<code>I/O</code>指标</li><li><code>IPC_LOCK</code>：拥有锁定内存等能力</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">--cap-add=SYS_NICE</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--cap-add=NET_ADMIN</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--cap-add=IPC_LOCK</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">--name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">some-clickhouse-server</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--ulimit</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nofile=</span><span style="color:#79B8FF;">262144</span><span style="color:#9ECBFF;">:262144</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">clickhouse/clickhouse-server</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">--cap-add=SYS_NICE</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--cap-add=NET_ADMIN</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--cap-add=IPC_LOCK</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">--name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">some-clickhouse-server</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--ulimit</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nofile=</span><span style="color:#005CC5;">262144</span><span style="color:#032F62;">:262144</span><span style="color:#24292E;"> </span><span style="color:#032F62;">clickhouse/clickhouse-server</span></span></code></pre></div><p>该配置对应与<code>docker compose</code>文件为</p><p><code>compose.yaml</code>配置文件增加如下即可</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># --snip--</span></span>
<span class="line"><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">clickhouse/clickhouse-server</span></span>
<span class="line"><span style="color:#85E89D;">ulimits</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">nofile</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">soft</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">262144</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">hard</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">262144</span></span>
<span class="line"><span style="color:#85E89D;">cap_add</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#9ECBFF;">SYS_NICE</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#9ECBFF;">NET_ADMIN</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#9ECBFF;">IPC_LOCK</span></span>
<span class="line"><span style="color:#6A737D;"># --snip--</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># --snip--</span></span>
<span class="line"><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">clickhouse/clickhouse-server</span></span>
<span class="line"><span style="color:#22863A;">ulimits</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">nofile</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">soft</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">262144</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">hard</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">262144</span></span>
<span class="line"><span style="color:#22863A;">cap_add</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#032F62;">SYS_NICE</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#032F62;">NET_ADMIN</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#032F62;">IPC_LOCK</span></span>
<span class="line"><span style="color:#6A737D;"># --snip--</span></span></code></pre></div><p>这些新增的<code>linux capabilities</code>感觉好像对于查询语句性能来说，也没有多大的提升，但是这些毕竟是官方<code>github</code>推荐的，所以闭着眼睛选就可以了</p><h2 id="clickhouse查询速度不稳定的因素" tabindex="-1"><code>clickhouse</code>查询速度不稳定的因素 <a class="header-anchor" href="#clickhouse查询速度不稳定的因素" aria-label="Permalink to &quot;\`clickhouse\`查询速度不稳定的因素&quot;">​</a></h2><p>产生情况</p><ul><li>如果是在数据写入之后，第一次查询某张表的数据，或者过了一段时间再次查询某张表的时候，会发现查询速度明显偏慢</li></ul><p>主要原因</p><ul><li><p><code>clickhouse</code>查询的时候会把一部分数据放置在内存中，内存类型是<code>page cache</code>，当再次访问数据的时候，这部分数据的读取速度会保持在<code>2-10GB/s</code>或者更高的速度</p></li><li><p>没有缓存，读取速度就取决于机器的磁盘顺序<code>IO</code>速度以及<code>CPU</code>解压缩处理数据的速度</p></li></ul><p>复现</p><ul><li><p>可以通过清空<code>page cache</code>的方式去重复模拟第一次查询<code>clickhouse</code>的速度</p><p>先把<code>buffer</code>缓存当中的数据同步到磁盘上面，执行如下命令</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sync</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sync</span></span></code></pre></div><p>触发回收内存操作，参数3表示清除<code>pagecache</code>和<code>slab</code>分配器中的缓存对象</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/proc/sys/vm/drop_caches</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">echo</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/proc/sys/vm/drop_caches</span></span></code></pre></div><p>最后执行如下命令查看<code>cache</code>缓存的大小，主要查看<code>cache</code>参数的值，下面命令对应的大小是<code>3.8Gi</code></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">free</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-wh</span><span style="color:#E1E4E8;">                         </span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#B392F0;">total</span><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">used</span><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">free</span><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">shared</span><span style="color:#E1E4E8;">     </span><span style="color:#9ECBFF;">buffers</span><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">cache</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">available</span></span>
<span class="line"><span style="color:#B392F0;">内存：</span><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">31</span><span style="color:#9ECBFF;">Gi</span><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">10</span><span style="color:#9ECBFF;">Gi</span><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">16</span><span style="color:#9ECBFF;">Gi</span><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">1.0</span><span style="color:#9ECBFF;">Gi</span><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">14</span><span style="color:#9ECBFF;">Mi</span><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">3.8</span><span style="color:#9ECBFF;">Gi</span><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">18</span><span style="color:#9ECBFF;">Gi</span></span>
<span class="line"><span style="color:#B392F0;">交换：</span><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">27</span><span style="color:#9ECBFF;">Gi</span><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">0</span><span style="color:#9ECBFF;">B</span><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">27</span><span style="color:#9ECBFF;">Gi</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">free</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-wh</span><span style="color:#24292E;">                         </span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#6F42C1;">total</span><span style="color:#24292E;">        </span><span style="color:#032F62;">used</span><span style="color:#24292E;">        </span><span style="color:#032F62;">free</span><span style="color:#24292E;">      </span><span style="color:#032F62;">shared</span><span style="color:#24292E;">     </span><span style="color:#032F62;">buffers</span><span style="color:#24292E;">       </span><span style="color:#032F62;">cache</span><span style="color:#24292E;">   </span><span style="color:#032F62;">available</span></span>
<span class="line"><span style="color:#6F42C1;">内存：</span><span style="color:#24292E;">          </span><span style="color:#005CC5;">31</span><span style="color:#032F62;">Gi</span><span style="color:#24292E;">        </span><span style="color:#005CC5;">10</span><span style="color:#032F62;">Gi</span><span style="color:#24292E;">        </span><span style="color:#005CC5;">16</span><span style="color:#032F62;">Gi</span><span style="color:#24292E;">       </span><span style="color:#005CC5;">1.0</span><span style="color:#032F62;">Gi</span><span style="color:#24292E;">        </span><span style="color:#005CC5;">14</span><span style="color:#032F62;">Mi</span><span style="color:#24292E;">       </span><span style="color:#005CC5;">3.8</span><span style="color:#032F62;">Gi</span><span style="color:#24292E;">        </span><span style="color:#005CC5;">18</span><span style="color:#032F62;">Gi</span></span>
<span class="line"><span style="color:#6F42C1;">交换：</span><span style="color:#24292E;">          </span><span style="color:#005CC5;">27</span><span style="color:#032F62;">Gi</span><span style="color:#24292E;">          </span><span style="color:#005CC5;">0</span><span style="color:#032F62;">B</span><span style="color:#24292E;">        </span><span style="color:#005CC5;">27</span><span style="color:#032F62;">Gi</span></span></code></pre></div></li></ul><h2 id="关于分区太小的优化建议" tabindex="-1">关于分区太小的优化建议 <a class="header-anchor" href="#关于分区太小的优化建议" aria-label="Permalink to &quot;关于分区太小的优化建议&quot;">​</a></h2><p><code>clickhouse</code>推荐采用大分区，比如按照月分区，不推荐使用按照天分区，每个分区都是分开存储的，分区太多容易造成每个颗粒存储数据太分散，遇到排序的时候容易影响性能</p><p>如果查询条件是<code>order by 分区键 limit 1</code>，则<code>clickhouse</code>会从所有有效分区中加载每个分区第一个符合排序条件的颗粒，直到符合<code>limit</code>的要求，这样<code>clickhouse</code>处理的行数就大于等于 <code>颗粒大小 * 分区数量</code>，在分区数量确实很大的情况下，就只能减小颗粒大小。虽然<code>clickhouse</code>强烈建议不要更改颗粒大小，但是在业务限制必须按照按天分区的场景下，可以把颗粒大小改为更小的值，比如<code>128</code>，这样就可以把<code>clickhouse</code>引擎处理的数据行数减小到约等于原来的<code>1/64</code></p><h2 id="关于clickhouse的查询or的优化" tabindex="-1">关于<code>clickhouse</code>的查询<code>or</code>的优化 <a class="header-anchor" href="#关于clickhouse的查询or的优化" aria-label="Permalink to &quot;关于\`clickhouse\`的查询\`or\`的优化&quot;">​</a></h2><p><code>clickhouse</code>对于多字段的<code>or</code>查询不太友好，查询时候会扫描全表</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">TABLE</span><span style="color:#E1E4E8;"> UT</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`id\`</span><span style="color:#E1E4E8;"> UInt64</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`UserID\`</span><span style="color:#E1E4E8;"> UInt32,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`URL\`</span><span style="color:#E1E4E8;"> String,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`EventTime\`</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">DateTime</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">TABLE</span><span style="color:#24292E;"> UT</span></span>
<span class="line"><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`id\`</span><span style="color:#24292E;"> UInt64</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`UserID\`</span><span style="color:#24292E;"> UInt32,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`URL\`</span><span style="color:#24292E;"> String,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`EventTime\`</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">DateTime</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>采用上表示范，比如现在查询<code>URL=&#39;test&#39; </code>或者<code>UserID=3</code>的</p><p>使用一些<code>ORM</code>或者常规的类似于<code>mysql</code>的写法就是</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> UT </span><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">URL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">or</span><span style="color:#E1E4E8;"> UserID</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">limit</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">select</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> UT </span><span style="color:#D73A49;">where</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">URL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">or</span><span style="color:#24292E;"> UserID</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">limit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span></code></pre></div><p>上述查询就会扫描全表，把所有<code>clickhouse</code>颗粒发送到引擎进行查询，效率很低</p><p>这个时候需要把查询修改一下，改为如下，如果<code>where</code>后面的字段是存在索引的，就可以很高效的使用索引了</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> UT </span><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> ( </span><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> UT </span><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">URL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">UNION ALL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> UT </span><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> UserID </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">select</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> UT </span><span style="color:#D73A49;">where</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> ( </span><span style="color:#D73A49;">select</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> UT </span><span style="color:#D73A49;">where</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">URL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">UNION ALL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">select</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> UT </span><span style="color:#D73A49;">where</span><span style="color:#24292E;"> UserID </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="参考阅读" tabindex="-1">参考阅读 <a class="header-anchor" href="#参考阅读" aria-label="Permalink to &quot;参考阅读&quot;">​</a></h2><p><a href="https://clickhouse.com/docs/zh/guides/improving-query-performance/skipping-indexes" target="_blank" rel="noreferrer">深入理解<code>clickhouse</code>跳数索引</a></p><p><a href="https://clickhouse.com/docs/zh/guides/improving-query-performance/sparse-primary-indexes#%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83" target="_blank" rel="noreferrer"><code>clickhouse</code>主键索引最佳实践</a></p><p><a href="https://clickhouse.com/docs/zh/sql-reference/data-types/lowcardinality" target="_blank" rel="noreferrer"><code>clickhouse</code>官方中文文档低基数类型</a></p><p><a href="https://clickhouse.com/docs/en/operations/tips" target="_blank" rel="noreferrer"><code>clickhouse</code>官方文档服务器使用建议</a></p><p><a href="https://www.cnblogs.com/lazyegg/p/12857374.html" target="_blank" rel="noreferrer">深入理解布隆过滤器</a></p><p><a href="https://zhuanlan.zhihu.com/p/50587308" target="_blank" rel="noreferrer">布隆过滤器<code>Bloom Filter</code>详解</a></p><p><a href="https://hur.st/bloomfilter/" target="_blank" rel="noreferrer">布隆过滤器计算网址</a></p><p><a href="https://itcn.blog/p/1149650246.html" target="_blank" rel="noreferrer">详解<code>LZ77</code>字典编码压缩和解压缩流程</a></p><p><a href="https://github.com/ClickHouse/ClickHouse/tree/master/docker/server" target="_blank" rel="noreferrer"><code>clickhouse</code>项目<code>docker</code>配置</a></p>`,121),c=[p];function r(t,y,E,i,d,h){return a(),o("div",null,c)}const C=s(e,[["render",r]]);export{u as __pageData,C as default};
