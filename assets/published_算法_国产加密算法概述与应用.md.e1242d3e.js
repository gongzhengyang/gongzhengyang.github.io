import{_ as s,o as a,c as n,Q as e}from"./chunks/framework.36bc40e2.js";const f=JSON.parse('{"title":"国产环境为什么要推行国密算法","description":"","frontmatter":{},"headers":[],"relativePath":"published/算法/国产加密算法概述与应用.md","filePath":"published/算法/国产加密算法概述与应用.md","lastUpdated":1700106669000}'),l={name:"published/算法/国产加密算法概述与应用.md"},p=e(`<h1 id="国产环境为什么要推行国密算法" tabindex="-1">国产环境为什么要推行国密算法 <a class="header-anchor" href="#国产环境为什么要推行国密算法" aria-label="Permalink to &quot;国产环境为什么要推行国密算法&quot;">​</a></h1><ul><li>自主可控，不用依赖于国外的技术，更符合国情</li><li>安全性更高，目前来说国密算法不会被破解，重要信息不会存在泄露危险</li><li>性能更好</li></ul><p>暂且不论上面的论述是否是睁着眼睛说的，至少第一点是不可否认的</p><h2 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h2><p>国产密码算法（国密算法）是指国家密码局认定的国产商用密码算法，实现商用密码算法的加密、解密和认证等功能</p><p>国产商业环境目前主要使用公开的<code>SM2(非对称算法)</code>、<code>SM3(哈希算法)</code>、<code>SM4(对称算法)</code></p><h2 id="常用国密算法" tabindex="-1">常用国密算法 <a class="header-anchor" href="#常用国密算法" aria-label="Permalink to &quot;常用国密算法&quot;">​</a></h2><h4 id="sm1" tabindex="-1"><code>SM1</code> <a class="header-anchor" href="#sm1" aria-label="Permalink to &quot;\`SM1\`&quot;">​</a></h4><ul><li>分组加密算法，分组长度，密钥长度都是<code>128bit</code></li><li>对称加密算法</li><li>算法安全保密程度和<code>AES</code>相当</li><li>算法不公开，以<code>IP</code>核形式存在于芯片中，需要通过加密芯片接口调用，采用硬件实现</li></ul><h4 id="sm2" tabindex="-1"><code>SM2</code> <a class="header-anchor" href="#sm2" aria-label="Permalink to &quot;\`SM2\`&quot;">​</a></h4><ul><li>非对称加密算法，基于椭圆曲线密码的公钥密码算法标准，其秘钥长度<code>256bit</code>，包含数字签名、密钥交换和公钥加密</li><li>用于替换<code>RSA/DH/ECDSA/ECDH</code>等国际算法</li><li><code>SM2</code>采用的是<code>ECC 256</code>位的一种，其安全强度比<code>RSA 2048</code>位高，且运算速度快于<code>RSA</code></li></ul><h4 id="sm3" tabindex="-1"><code>SM3</code> <a class="header-anchor" href="#sm3" aria-label="Permalink to &quot;\`SM3\`&quot;">​</a></h4><ul><li>密码杂凑算法，报文摘要算法，不可逆</li><li>在<code>SHA-256</code>基础上改进实现的一种算法，采用<code>Merkle-Damgard</code>结构，消息分组长度为<code>512bit</code>，输出的摘要值长度为<code>256bit</code></li><li>用于替代<code>MD5/SHA-1/SHA-2</code>等国际算法</li><li>适用于数字签名和验证、消息认证码的生成与验证以及随机数的生成</li></ul><h4 id="sm4" tabindex="-1"><code>SM4</code> <a class="header-anchor" href="#sm4" aria-label="Permalink to &quot;\`SM4\`&quot;">​</a></h4><ul><li><p>分组对称密码算法</p></li><li><p><code>AES</code>算法具有相同的密钥长度、分组长度，都是<code>128bit</code></p></li><li><p>用于替代<code>DES/AES</code>等国际算法</p></li><li><p>算法包含几种常见加密解密模式</p><ul><li><p><strong><code>ECB</code>模式</strong></p><p>主要逻辑</p><ol><li><p>把数据按照一定长度字节分段进行加密或者解密，最后一段不足固定长度的话补0或者补<code>F</code></p></li><li><p>最后把计算出来的数据连在一起就得到明文或者密文</p></li></ol><p>优点</p><ol><li>简单</li><li>有利于并行计算</li><li>误差不会被传递</li></ol><p>缺点</p><ol><li>不能隐藏明文的模式</li><li>可能对明文进行主动攻击</li></ol></li><li><p><strong><code>CBC</code>模式</strong></p><p>是一种循环模式</p><p>主要逻辑</p><ol><li>把数据按照固定长度分组，最后一组数据长度不足的话填充指定数据</li><li>第一组数据与初始化向量<code>iv</code>进行异或运算，产生的结果执行加密得到第一组密文</li><li>第二组数据与第一组加密结果进行异或后的结果，执行加密得到第二组密文</li><li>最后把所有分组密文拼接在一起得到加密结果</li></ol><p>优点</p><ol><li>不容易主动攻击</li><li>安全性好于<code>ECB</code>，是<code>SSL、IPSec</code>的标准</li></ol><p>缺点</p><ol><li><p>不利于并行计算</p></li><li><p>误差传递</p></li><li><p>需要初始化向量<code>IV</code></p></li></ol></li></ul></li></ul><h4 id="sm9" tabindex="-1"><code>SM9</code> <a class="header-anchor" href="#sm9" aria-label="Permalink to &quot;\`SM9\`&quot;">​</a></h4><ul><li>用椭圆曲线对实现的基于标识的数字签名算法、密钥交换协议、密钥封装机制和公钥加密与解密算法，包括数字签名生成算法和验证算法，并给出了数字签名与验证算法及其相应的流程</li></ul><h2 id="python国密算法推荐与应用" tabindex="-1"><code>python</code>国密算法推荐与应用 <a class="header-anchor" href="#python国密算法推荐与应用" aria-label="Permalink to &quot;\`python\`国密算法推荐与应用&quot;">​</a></h2><p>开源项目</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">https://github.com/duanhongyi/gmssl</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">https://github.com/duanhongyi/gmssl</span></span></code></pre></div><h4 id="sm2与sm3算法" tabindex="-1"><code>SM2与SM3算法</code> <a class="header-anchor" href="#sm2与sm3算法" aria-label="Permalink to &quot;\`SM2与SM3算法\`&quot;">​</a></h4><p>由于<code>sm2</code>加密需要生成一个<code>sm2</code>对应的椭圆曲线对应的公钥和私钥，但是<code>gmssl</code>库没有封装一个随机生成公钥私钥的函数，所以需要访问一个第三方的网址去获取生成的公钥私钥，网址如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">https://const.net.cn/tool/sm2/genkey/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">https://const.net.cn/tool/sm2/genkey/</span></span></code></pre></div><p>把生成的公钥和私钥输入作为参数，填入如下代码</p><p>初始化定义，非对称加密需要提供公钥和私钥参数</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> gmssl </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> sm2, func</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">private_key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;00B9AB0B828FF68872F21A837FC303668428DEA11DCD1B24429D0C99E24EED83D5&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">public_key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;B9C9A6E04E9C91F7BA880429273747D7EF5DDEB0BB2FF6317EB00BEF331A83081A6994B8993F3F5D6EADDDB81872266C87C018FB4162F5AF347B483E24620207&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">sm2_crypt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sm2.CryptSM2(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">public_key</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">public_key, </span><span style="color:#FFAB70;">private_key</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">private_key, </span><span style="color:#FFAB70;">asn1</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> gmssl </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> sm2, func</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">private_key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;00B9AB0B828FF68872F21A837FC303668428DEA11DCD1B24429D0C99E24EED83D5&#39;</span></span>
<span class="line"><span style="color:#24292E;">public_key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;B9C9A6E04E9C91F7BA880429273747D7EF5DDEB0BB2FF6317EB00BEF331A83081A6994B8993F3F5D6EADDDB81872266C87C018FB4162F5AF347B483E24620207&#39;</span></span>
<span class="line"><span style="color:#24292E;">sm2_crypt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sm2.CryptSM2(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">public_key</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">public_key, </span><span style="color:#E36209;">private_key</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">private_key, </span><span style="color:#E36209;">asn1</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span></code></pre></div><p>加密和解密</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">b</span><span style="color:#9ECBFF;">&quot;test&quot;</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _ </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    enc_data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sm2_crypt.encrypt(data)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&#39;encrypted data len </span><span style="color:#79B8FF;">{len</span><span style="color:#E1E4E8;">(enc_data.hex())</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">: </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">enc_data.hex()</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    dec_data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sm2_crypt.decrypt(enc_data)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&#39;decrypted data len </span><span style="color:#79B8FF;">{len</span><span style="color:#E1E4E8;">(dec_data)</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">: </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">dec_data</span><span style="color:#79B8FF;">}\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> dec_data </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> data</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">b</span><span style="color:#032F62;">&quot;test&quot;</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _ </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    enc_data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sm2_crypt.encrypt(data)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&#39;encrypted data len </span><span style="color:#005CC5;">{len</span><span style="color:#24292E;">(enc_data.hex())</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">: </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">enc_data.hex()</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    dec_data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sm2_crypt.decrypt(enc_data)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&#39;decrypted data len </span><span style="color:#005CC5;">{len</span><span style="color:#24292E;">(dec_data)</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">: </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">dec_data</span><span style="color:#005CC5;">}\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> dec_data </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> data</span></span></code></pre></div><p>生成的打印输出如下，生成密文的长度都是固定的200，发现每次生成的密文都是不同的，在加密过程中加入了<code>salt</code>，避免了相同明文映射到相同密文造成的不安全性</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">encrypted data len 200: 42a29aa33143985e14ae37ccdba89704595008e561af51cb7d88d2c9663468492b0d08a431fa5cd5b92e785ffd9cb858a69d71da82ddb3ddfeaa6e5e765e25cfb68bd4b307c63bc7fe844045159e8cbdbecbe4e3c31359c5f87669abb1dc6e431ad82632</span></span>
<span class="line"><span style="color:#e1e4e8;">decrypted data len 4: b&#39;test&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">encrypted data len 200: a797d8e1a205e1e50d60895b29d056eecd6d8e0f58ececf283680d695a007c24c2f182ce9601a500e3b755f6f530d3490b4efc43c242b9bdfff64253099792e8a7c4fa9692a59961fc7b6ef35a738a27d1c262f7e4a39190c64e1b8c2ff7c9ffa48748a6</span></span>
<span class="line"><span style="color:#e1e4e8;">decrypted data len 4: b&#39;test&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">encrypted data len 200: cd010a36cb272c9fc1f355e9e707554c972ba0ec27fe171a137b7d9165a7fe7f9913633333b1290909ce28f73973aa84fe666a97335c6d12f17fd724c87cc2bd37bc4581118fe049cd08ef963ffce0d84cd779f7c6b875c17a88b864115bca71a43cfbd9</span></span>
<span class="line"><span style="color:#e1e4e8;">decrypted data len 4: b&#39;test&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">encrypted data len 200: 88f5c05e7830c8b70320f2c40673d9aa0fd961535214825765d81e85e9c47e6bdb064086c1b462b2a735aa82ea5ed9668f8611a16c811247ff9dad92f9d572f983d5d2dcc26ae808fdfa4fb7044245bf9066ea11a28fb18208091e060da7c62ea6145266</span></span>
<span class="line"><span style="color:#e1e4e8;">decrypted data len 4: b&#39;test&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">encrypted data len 200: a5ef6804476fe7442c181aa70df95eae31c4ff59fb70002f7dfca1e8d50f987c8917ce0c9754c19ec5696bfcd71ff686847ca5c62f8c49654388ff1b463393aed40d3a53876587c53aa33aee466248d0fceb4f6c97ada7b25194d0990275b97c81fa32d1</span></span>
<span class="line"><span style="color:#e1e4e8;">decrypted data len 4: b&#39;test&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">encrypted data len 200: 42a29aa33143985e14ae37ccdba89704595008e561af51cb7d88d2c9663468492b0d08a431fa5cd5b92e785ffd9cb858a69d71da82ddb3ddfeaa6e5e765e25cfb68bd4b307c63bc7fe844045159e8cbdbecbe4e3c31359c5f87669abb1dc6e431ad82632</span></span>
<span class="line"><span style="color:#24292e;">decrypted data len 4: b&#39;test&#39;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">encrypted data len 200: a797d8e1a205e1e50d60895b29d056eecd6d8e0f58ececf283680d695a007c24c2f182ce9601a500e3b755f6f530d3490b4efc43c242b9bdfff64253099792e8a7c4fa9692a59961fc7b6ef35a738a27d1c262f7e4a39190c64e1b8c2ff7c9ffa48748a6</span></span>
<span class="line"><span style="color:#24292e;">decrypted data len 4: b&#39;test&#39;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">encrypted data len 200: cd010a36cb272c9fc1f355e9e707554c972ba0ec27fe171a137b7d9165a7fe7f9913633333b1290909ce28f73973aa84fe666a97335c6d12f17fd724c87cc2bd37bc4581118fe049cd08ef963ffce0d84cd779f7c6b875c17a88b864115bca71a43cfbd9</span></span>
<span class="line"><span style="color:#24292e;">decrypted data len 4: b&#39;test&#39;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">encrypted data len 200: 88f5c05e7830c8b70320f2c40673d9aa0fd961535214825765d81e85e9c47e6bdb064086c1b462b2a735aa82ea5ed9668f8611a16c811247ff9dad92f9d572f983d5d2dcc26ae808fdfa4fb7044245bf9066ea11a28fb18208091e060da7c62ea6145266</span></span>
<span class="line"><span style="color:#24292e;">decrypted data len 4: b&#39;test&#39;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">encrypted data len 200: a5ef6804476fe7442c181aa70df95eae31c4ff59fb70002f7dfca1e8d50f987c8917ce0c9754c19ec5696bfcd71ff686847ca5c62f8c49654388ff1b463393aed40d3a53876587c53aa33aee466248d0fceb4f6c97ada7b25194d0990275b97c81fa32d1</span></span>
<span class="line"><span style="color:#24292e;">decrypted data len 4: b&#39;test&#39;</span></span></code></pre></div><p>签名和验证</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">b</span><span style="color:#9ECBFF;">&quot;test&quot;</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _ </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    random_hex_str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> func.random_hex(sm2_crypt.para_len)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&#39;random hex str len:</span><span style="color:#79B8FF;">{len</span><span style="color:#E1E4E8;">(random_hex_str)</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">: </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">random_hex_str</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    sign </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sm2_crypt.sign(data, random_hex_str)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&#39;sign len: </span><span style="color:#79B8FF;">{len</span><span style="color:#E1E4E8;">(sign)</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">: </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">sign</span><span style="color:#79B8FF;">}\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> sm2_crypt.verify(sign, data)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">b</span><span style="color:#032F62;">&quot;test&quot;</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _ </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    random_hex_str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> func.random_hex(sm2_crypt.para_len)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&#39;random hex str len:</span><span style="color:#005CC5;">{len</span><span style="color:#24292E;">(random_hex_str)</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">: </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">random_hex_str</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    sign </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sm2_crypt.sign(data, random_hex_str)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&#39;sign len: </span><span style="color:#005CC5;">{len</span><span style="color:#24292E;">(sign)</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">: </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">sign</span><span style="color:#005CC5;">}\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> sm2_crypt.verify(sign, data)</span></span></code></pre></div><p>输出结果</p><p>每次签名的时候都会使用一个随机16进制字符串，同时输出的签名长度也不固定</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">random hex str len:64: ae41ca267f156a5e8bc2b5842138518df2187c4b81185502eaba534cecd473de</span></span>
<span class="line"><span style="color:#e1e4e8;">sign len: 144: 3046022100b32014d803f37c731d2612e6b79d8af8ab0e9a70bca60bb426e69d816c9a5c6e02210092d08bf619a8b465c40333b0151c38f8ed83e9243778eb16aab158dbbdea146c</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">random hex str len:64: 5becbd479334bf24177d1cd945d44a6b6a645ab7ff3c7cc13a1ced27400c22dd</span></span>
<span class="line"><span style="color:#e1e4e8;">sign len: 140: 304402203bca856f3714692050e0450b60199ee84933727c18c86afb966b92a67e10acb802201e13845e809f2f91d893602422fcf227826465f3ff388ec619ecfae09272f49e</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">random hex str len:64: 80e8a41ec38ed14c48d20fd6d3dba36e8e44f699def324032b920aa0024d79b7</span></span>
<span class="line"><span style="color:#e1e4e8;">sign len: 142: 304502210094a9cafd30d458467eaf63d560f4a76d20961d73171ab48f7a680c29aa6ec093022075bac7f549ca5cf9aef442d202ea1246ce3513a3c90cc0b5478f8d67879b5a1d</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">random hex str len:64: 7c7dbbca98378d1669c8884e7a9edab4c33227099487cb534c8f42214d4bcde2</span></span>
<span class="line"><span style="color:#e1e4e8;">sign len: 142: 3045022100c195ebbf1610c0e73739f702e4f486f40fa71578f8afcdf171fae3019421520702202978040d809d09e8c39dc459e3386b06877276c6129e355a70b16e2cd2d883b6</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">random hex str len:64: ac3e6789f816a4058eb0e70611ea784570cbba2aa885f7a847e9801ae2445f89</span></span>
<span class="line"><span style="color:#e1e4e8;">sign len: 142: 3045022100cb2a28cb29e1e6435d38d893e448a0c8aad1cc0bc4c532f09889f4dd70c3f8b5022001652e812c8f4828ddd6f4ce02b221f687f8f8cbe58263043a9e8f17f36793f3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">random hex str len:64: ae41ca267f156a5e8bc2b5842138518df2187c4b81185502eaba534cecd473de</span></span>
<span class="line"><span style="color:#24292e;">sign len: 144: 3046022100b32014d803f37c731d2612e6b79d8af8ab0e9a70bca60bb426e69d816c9a5c6e02210092d08bf619a8b465c40333b0151c38f8ed83e9243778eb16aab158dbbdea146c</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">random hex str len:64: 5becbd479334bf24177d1cd945d44a6b6a645ab7ff3c7cc13a1ced27400c22dd</span></span>
<span class="line"><span style="color:#24292e;">sign len: 140: 304402203bca856f3714692050e0450b60199ee84933727c18c86afb966b92a67e10acb802201e13845e809f2f91d893602422fcf227826465f3ff388ec619ecfae09272f49e</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">random hex str len:64: 80e8a41ec38ed14c48d20fd6d3dba36e8e44f699def324032b920aa0024d79b7</span></span>
<span class="line"><span style="color:#24292e;">sign len: 142: 304502210094a9cafd30d458467eaf63d560f4a76d20961d73171ab48f7a680c29aa6ec093022075bac7f549ca5cf9aef442d202ea1246ce3513a3c90cc0b5478f8d67879b5a1d</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">random hex str len:64: 7c7dbbca98378d1669c8884e7a9edab4c33227099487cb534c8f42214d4bcde2</span></span>
<span class="line"><span style="color:#24292e;">sign len: 142: 3045022100c195ebbf1610c0e73739f702e4f486f40fa71578f8afcdf171fae3019421520702202978040d809d09e8c39dc459e3386b06877276c6129e355a70b16e2cd2d883b6</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">random hex str len:64: ac3e6789f816a4058eb0e70611ea784570cbba2aa885f7a847e9801ae2445f89</span></span>
<span class="line"><span style="color:#24292e;">sign len: 142: 3045022100cb2a28cb29e1e6435d38d893e448a0c8aad1cc0bc4c532f09889f4dd70c3f8b5022001652e812c8f4828ddd6f4ce02b221f687f8f8cbe58263043a9e8f17f36793f3</span></span></code></pre></div><p><code>sm3</code>算法是一种<code>hash</code>算法</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> gmssl </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> sm3, func</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _ </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sm3.sm3_hash(func.bytes_to_list(</span><span style="color:#F97583;">b</span><span style="color:#9ECBFF;">&quot;abc&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&#39;len: </span><span style="color:#79B8FF;">{len</span><span style="color:#E1E4E8;">(value)</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">: </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">value</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> gmssl </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> sm3, func</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _ </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sm3.sm3_hash(func.bytes_to_list(</span><span style="color:#D73A49;">b</span><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&#39;len: </span><span style="color:#005CC5;">{len</span><span style="color:#24292E;">(value)</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">: </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">value</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>运行结果是三个相同的64位<code>hash</code>值</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">len: 64: 66c7f0f462eeedd9d1f2d46bdc10e4e24167c4875cf2f7a2297da02b8f4ba8e0</span></span>
<span class="line"><span style="color:#e1e4e8;">len: 64: 66c7f0f462eeedd9d1f2d46bdc10e4e24167c4875cf2f7a2297da02b8f4ba8e0</span></span>
<span class="line"><span style="color:#e1e4e8;">len: 64: 66c7f0f462eeedd9d1f2d46bdc10e4e24167c4875cf2f7a2297da02b8f4ba8e0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">len: 64: 66c7f0f462eeedd9d1f2d46bdc10e4e24167c4875cf2f7a2297da02b8f4ba8e0</span></span>
<span class="line"><span style="color:#24292e;">len: 64: 66c7f0f462eeedd9d1f2d46bdc10e4e24167c4875cf2f7a2297da02b8f4ba8e0</span></span>
<span class="line"><span style="color:#24292e;">len: 64: 66c7f0f462eeedd9d1f2d46bdc10e4e24167c4875cf2f7a2297da02b8f4ba8e0</span></span></code></pre></div><p>如果有类似于签名和校验的需要，还是推荐配合<code>sm2</code>进行</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">b</span><span style="color:#9ECBFF;">&quot;test&quot;</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _ </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    sign </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sm2_crypt.sign_with_sm3(data)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&#39;len: </span><span style="color:#79B8FF;">{len</span><span style="color:#E1E4E8;">(sign)</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">sign</span><span style="color:#79B8FF;">}\\n</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> sm2_crypt.verify_with_sm3(sign, data)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">b</span><span style="color:#032F62;">&quot;test&quot;</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _ </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    sign </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sm2_crypt.sign_with_sm3(data)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&#39;len: </span><span style="color:#005CC5;">{len</span><span style="color:#24292E;">(sign)</span><span style="color:#005CC5;">}</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">sign</span><span style="color:#005CC5;">}\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> sm2_crypt.verify_with_sm3(sign, data)</span></span></code></pre></div><p>输出结果如下，每次生成的签名长度不固定，值也不同</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">len: 144 3046022100e1c3aa1b1de8be08a6c727e58d577fb7632adc08b49455b88aaef405cc80ae6c022100abbf44d84c5eeed6764b9aaeda044dc80f3e997f9c8d04dd75f7a73c6d21a353</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">len: 142 30450220026c1c8b3e56eacab664d34e33d90e95235fc16eec701df4de2eca699ba7d1cb022100e3c4158fd387e93c9a79a5e2d3d4d92a0aabcd8f72a0bc79fcd3e20a549599b9</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">len: 142 3045022100e0d049d45893be28cea5221fbe560fa2d519e191ea46aa8fa0dbaf181ae10afe02201ef02258c2f867de34c2ecc16184bada7e35fb515e1fed2e7bbfa11f52a3a8d0</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">len: 142 30450221009d68b397f288e246e647aa288bb0e8fa038011d6381dd30130849c0756a1defb02200c0d172deab8765159f78e0de8a9d5d3bfc0df9e366902da470f05a4c253f377</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">len: 140 3044022061c7bef3bcb7a2fd85ea1d8995e0bf05e9ec9b5ba5ef882728d73402876258ac02202d73fe00c8a552d45d8934104c5857d8e23b046e1f98ded8ebef26f8bcf30d92</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">len: 144 3046022100e1c3aa1b1de8be08a6c727e58d577fb7632adc08b49455b88aaef405cc80ae6c022100abbf44d84c5eeed6764b9aaeda044dc80f3e997f9c8d04dd75f7a73c6d21a353</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">len: 142 30450220026c1c8b3e56eacab664d34e33d90e95235fc16eec701df4de2eca699ba7d1cb022100e3c4158fd387e93c9a79a5e2d3d4d92a0aabcd8f72a0bc79fcd3e20a549599b9</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">len: 142 3045022100e0d049d45893be28cea5221fbe560fa2d519e191ea46aa8fa0dbaf181ae10afe02201ef02258c2f867de34c2ecc16184bada7e35fb515e1fed2e7bbfa11f52a3a8d0</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">len: 142 30450221009d68b397f288e246e647aa288bb0e8fa038011d6381dd30130849c0756a1defb02200c0d172deab8765159f78e0de8a9d5d3bfc0df9e366902da470f05a4c253f377</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">len: 140 3044022061c7bef3bcb7a2fd85ea1d8995e0bf05e9ec9b5ba5ef882728d73402876258ac02202d73fe00c8a552d45d8934104c5857d8e23b046e1f98ded8ebef26f8bcf30d92</span></span></code></pre></div><h4 id="sm4算法" tabindex="-1"><code>SM4</code>算法 <a class="header-anchor" href="#sm4算法" aria-label="Permalink to &quot;\`SM4\`算法&quot;">​</a></h4><p>初始化定义如下，由于是分组加密算法，需要使用一个密钥，密钥长度为<code>128bit</code></p><p>下面定义<code>key</code>的组成，全是<code>ascii</code>字符，每个字符一个字节，所以需要16位字符，超过的字符会被忽略</p><p>测试加密明文数据是<code>test-value</code></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> gmssl.sm4 </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> CryptSM4, </span><span style="color:#79B8FF;">SM4_ENCRYPT</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">SM4_DECRYPT</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">b</span><span style="color:#9ECBFF;">&#39;1234567812345678&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">b</span><span style="color:#9ECBFF;">&#39;test-value&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">crypt_sm4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CryptSM4()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> gmssl.sm4 </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> CryptSM4, </span><span style="color:#005CC5;">SM4_ENCRYPT</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">SM4_DECRYPT</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">b</span><span style="color:#032F62;">&#39;1234567812345678&#39;</span></span>
<span class="line"><span style="color:#24292E;">value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">b</span><span style="color:#032F62;">&#39;test-value&#39;</span></span>
<span class="line"><span style="color:#24292E;">crypt_sm4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CryptSM4()</span></span></code></pre></div><p>测试<code>ecb</code>模式加密解密</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _ </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    crypt_sm4.set_key(key, </span><span style="color:#79B8FF;">SM4_ENCRYPT</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    encrypt_value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> crypt_sm4.crypt_ecb(value)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&#39;original len: </span><span style="color:#79B8FF;">{len</span><span style="color:#E1E4E8;">(value)</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">value</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">, encrypt len: </span><span style="color:#79B8FF;">{len</span><span style="color:#E1E4E8;">(encrypt_value)</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">encrypt_value</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    crypt_sm4.set_key(key, </span><span style="color:#79B8FF;">SM4_DECRYPT</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    decrypt_value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> crypt_sm4.crypt_ecb(encrypt_value)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> decrypt_value</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _ </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    crypt_sm4.set_key(key, </span><span style="color:#005CC5;">SM4_ENCRYPT</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    encrypt_value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> crypt_sm4.crypt_ecb(value)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&#39;original len: </span><span style="color:#005CC5;">{len</span><span style="color:#24292E;">(value)</span><span style="color:#005CC5;">}</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">value</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">, encrypt len: </span><span style="color:#005CC5;">{len</span><span style="color:#24292E;">(encrypt_value)</span><span style="color:#005CC5;">}</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">encrypt_value</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    crypt_sm4.set_key(key, </span><span style="color:#005CC5;">SM4_DECRYPT</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    decrypt_value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> crypt_sm4.crypt_ecb(encrypt_value)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> decrypt_value</span></span></code></pre></div><p>输出结果如下，可以获取到结果如下</p><p>每次加密计算的密文结果是一样的，所以如果密钥泄露的话，数据就不安全了</p><p>生成的密文长度取决于明文长度，密文长度为<code>16 * (明文长度//16 + 1)</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">original len: 10 b&#39;test-value&#39;, encrypt len: 16 b&#39;\\xaaa\\xe5&quot;YiT\\x1d\\x84\\xa3e2\\xec9\\x80\\xd8&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;">original len: 10 b&#39;test-value&#39;, encrypt len: 16 b&#39;\\xaaa\\xe5&quot;YiT\\x1d\\x84\\xa3e2\\xec9\\x80\\xd8&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;">original len: 10 b&#39;test-value&#39;, encrypt len: 16 b&#39;\\xaaa\\xe5&quot;YiT\\x1d\\x84\\xa3e2\\xec9\\x80\\xd8&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;">original len: 10 b&#39;test-value&#39;, encrypt len: 16 b&#39;\\xaaa\\xe5&quot;YiT\\x1d\\x84\\xa3e2\\xec9\\x80\\xd8&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;">original len: 10 b&#39;test-value&#39;, encrypt len: 16 b&#39;\\xaaa\\xe5&quot;YiT\\x1d\\x84\\xa3e2\\xec9\\x80\\xd8&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">original len: 10 b&#39;test-value&#39;, encrypt len: 16 b&#39;\\xaaa\\xe5&quot;YiT\\x1d\\x84\\xa3e2\\xec9\\x80\\xd8&#39;</span></span>
<span class="line"><span style="color:#24292e;">original len: 10 b&#39;test-value&#39;, encrypt len: 16 b&#39;\\xaaa\\xe5&quot;YiT\\x1d\\x84\\xa3e2\\xec9\\x80\\xd8&#39;</span></span>
<span class="line"><span style="color:#24292e;">original len: 10 b&#39;test-value&#39;, encrypt len: 16 b&#39;\\xaaa\\xe5&quot;YiT\\x1d\\x84\\xa3e2\\xec9\\x80\\xd8&#39;</span></span>
<span class="line"><span style="color:#24292e;">original len: 10 b&#39;test-value&#39;, encrypt len: 16 b&#39;\\xaaa\\xe5&quot;YiT\\x1d\\x84\\xa3e2\\xec9\\x80\\xd8&#39;</span></span>
<span class="line"><span style="color:#24292e;">original len: 10 b&#39;test-value&#39;, encrypt len: 16 b&#39;\\xaaa\\xe5&quot;YiT\\x1d\\x84\\xa3e2\\xec9\\x80\\xd8&#39;</span></span></code></pre></div><p>测试<code>cbc</code>模式加密解密，需要定义一个初始化向量</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">iv </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">b</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00</span><span style="color:#9ECBFF;">&#39;</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _ </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    crypt_sm4.set_key(key, </span><span style="color:#79B8FF;">SM4_ENCRYPT</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    encrypt_value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> crypt_sm4.crypt_cbc(iv, value)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&#39;encrypt len: </span><span style="color:#79B8FF;">{len</span><span style="color:#E1E4E8;">(encrypt_value)</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">encrypt_value</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    crypt_sm4.set_key(key, </span><span style="color:#79B8FF;">SM4_DECRYPT</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    decrypt_value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> crypt_sm4.crypt_cbc(iv, encrypt_value)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> decrypt_value</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">iv </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">b</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00</span><span style="color:#032F62;">&#39;</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _ </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    crypt_sm4.set_key(key, </span><span style="color:#005CC5;">SM4_ENCRYPT</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    encrypt_value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> crypt_sm4.crypt_cbc(iv, value)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&#39;encrypt len: </span><span style="color:#005CC5;">{len</span><span style="color:#24292E;">(encrypt_value)</span><span style="color:#005CC5;">}</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">encrypt_value</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    crypt_sm4.set_key(key, </span><span style="color:#005CC5;">SM4_DECRYPT</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    decrypt_value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> crypt_sm4.crypt_cbc(iv, encrypt_value)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> decrypt_value</span></span></code></pre></div><p>得到结果如下，每次加密结果都一样</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">encrypt len: 16 b&#39;\\xaaa\\xe5&quot;YiT\\x1d\\x84\\xa3e2\\xec9\\x80\\xd8&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;">encrypt len: 16 b&#39;\\xaaa\\xe5&quot;YiT\\x1d\\x84\\xa3e2\\xec9\\x80\\xd8&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;">encrypt len: 16 b&#39;\\xaaa\\xe5&quot;YiT\\x1d\\x84\\xa3e2\\xec9\\x80\\xd8&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;">encrypt len: 16 b&#39;\\xaaa\\xe5&quot;YiT\\x1d\\x84\\xa3e2\\xec9\\x80\\xd8&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;">encrypt len: 16 b&#39;\\xaaa\\xe5&quot;YiT\\x1d\\x84\\xa3e2\\xec9\\x80\\xd8&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">encrypt len: 16 b&#39;\\xaaa\\xe5&quot;YiT\\x1d\\x84\\xa3e2\\xec9\\x80\\xd8&#39;</span></span>
<span class="line"><span style="color:#24292e;">encrypt len: 16 b&#39;\\xaaa\\xe5&quot;YiT\\x1d\\x84\\xa3e2\\xec9\\x80\\xd8&#39;</span></span>
<span class="line"><span style="color:#24292e;">encrypt len: 16 b&#39;\\xaaa\\xe5&quot;YiT\\x1d\\x84\\xa3e2\\xec9\\x80\\xd8&#39;</span></span>
<span class="line"><span style="color:#24292e;">encrypt len: 16 b&#39;\\xaaa\\xe5&quot;YiT\\x1d\\x84\\xa3e2\\xec9\\x80\\xd8&#39;</span></span>
<span class="line"><span style="color:#24292e;">encrypt len: 16 b&#39;\\xaaa\\xe5&quot;YiT\\x1d\\x84\\xa3e2\\xec9\\x80\\xd8&#39;</span></span></code></pre></div><h2 id="golang国密算法实现推荐" tabindex="-1"><code>golang</code>国密算法实现推荐 <a class="header-anchor" href="#golang国密算法实现推荐" aria-label="Permalink to &quot;\`golang\`国密算法实现推荐&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">https://github.com/tjfoc/gmsm</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">https://github.com/tjfoc/gmsm</span></span></code></pre></div><h2 id="参考阅读" tabindex="-1">参考阅读 <a class="header-anchor" href="#参考阅读" aria-label="Permalink to &quot;参考阅读&quot;">​</a></h2><p><a href="https://zhuanlan.zhihu.com/p/132352160" target="_blank" rel="noreferrer">国密算法介绍-知乎</a></p><p><a href="https://github.com/duanhongyi/gmssl" target="_blank" rel="noreferrer"><code>GMSSL</code>项目<code>readme</code></a></p>`,63),o=[p];function c(t,r,y,d,i,E){return a(),n("div",null,o)}const F=s(l,[["render",c]]);export{f as __pageData,F as default};
