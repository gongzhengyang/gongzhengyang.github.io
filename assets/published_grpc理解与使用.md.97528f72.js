import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.36bc40e2.js";const o="/assets/grpc.6405242c.png",g=JSON.parse('{"title":"协议介绍","description":"","frontmatter":{},"headers":[],"relativePath":"published/grpc理解与使用.md","filePath":"published/grpc理解与使用.md","lastUpdated":1700106669000}'),p={name:"published/grpc理解与使用.md"},e=l(`<h1 id="协议介绍" tabindex="-1">协议介绍 <a class="header-anchor" href="#协议介绍" aria-label="Permalink to &quot;协议介绍&quot;">​</a></h1><p><code>gRPC</code> 是谷歌开源的一套 <code>RPC</code> 协议框架，底层使用<code>HTTP/2</code>协议，主要有两部分，数据编码以及请求映射</p><p>数据编码是将内存对象编码为可传输的字节流，也包括把字节流转化为内存对象，常见的包含<code>json, msgpack, xml, protobuf</code>，其中该编码效率比<code>json</code>高一些，<code>grpc</code>选择使用<code>protobuf</code></p><h2 id="grpc为什么基于http2" tabindex="-1"><code>gRPC</code>为什么基于<code>HTTP2</code> <a class="header-anchor" href="#grpc为什么基于http2" aria-label="Permalink to &quot;\`gRPC\`为什么基于\`HTTP2\`&quot;">​</a></h2><p><code>HTTP1.1</code>遇到的问题</p><ul><li><p>协议繁琐，包含很多的细节设计，也预留了很多未来扩展选项，所以没有软件实现了协议中提及的全部细节</p></li><li><p>协议规定是一发一收这种模式，相当于一个先进先出的串行队列，<code>HTTP Pipelining</code> 把多个 <code>HTTP</code> 请求放到一个 <code>TCP</code> 连接中来发送，发送过程中不需要服务器对前一个请求的响应，但是在客户端，还是会按照发送的顺序来接收响应请求，导致 <code>HTTP</code> 头阻塞(<code>Head-of-line blocking</code>)</p></li></ul><p><code>HTTP2</code>的特性与组成</p><ul><li><code>HEAD</code> 头数据压缩: 对 <code>HTTP</code> 头字段进行数据压缩，因为 <code>HTTP</code> 头包含了大量冗余数据，<code>HTTP2</code>对这些数据进行了压缩，压缩后对于请求大小的影响显著，可以将多个请求压缩到一个包中，减小传输负载</li><li>多路复用: 每个 <code>HTTP </code>请求/应答在各自的流（<code>stream</code>，每个流都是相互独立，有一个整数<code>ID</code> 标识，是存在于<code>TCP</code>连接中的一个虚拟连接通道，可以承载双向消息）中完成数据交换，如果一个请求/应答阻塞或者速度很慢，也不会影响其它流中的请求/应答处理，在一个 <code>TCP</code> 连接中就可以传输多个流数据而无需建立多个连接</li><li>流量控制和优先级机制: 可以有效利用流的多路复用机制，流量控制可以确保只有接收者使用的数据会被传输，优先级机制可以确保重要的资源被优先传输</li><li>服务端推送: 即服务端可以推送应答给客户端</li><li>消息报文二进制编码</li><li>最小传输单元<code>帧（frame）</code>：<code>HTTP2</code> 定义了很多类型的帧，每个帧服务于不同的目的，数据帧中有 1 个关键数据，这个帧属于哪个资源，消息由一个或多个帧构成</li></ul><h2 id="json" tabindex="-1"><code>json</code> <a class="header-anchor" href="#json" aria-label="Permalink to &quot;\`json\`&quot;">​</a></h2><p>全称<code>JavaScript Object Notation</code>，一种轻量级的数据交换格式，具有良好的可读和便于快速编写的特性。可在不同平台之间进行数据交换，在<code>json</code>出现以前，常用的是<code>xml（Extensiable Markup Language）</code>进行文件传输</p><p><code>xml</code>和<code>json</code>的共同优点</p><ul><li>可读性好，结构清晰</li><li>分层存储(层次嵌套)</li><li>都可作为<code>Ajax</code>s传输数据</li><li>都跨平台，可作为数据传输格式</li></ul><p><code>json</code>的优点</p><ul><li>数据格式简单，易读易写，且数据都是压缩的，文件较小，便于传输</li><li><code>json</code>解析难度较低，而<code>xml</code>需要循环遍历<code>DOM</code>进行解析，效率较低</li><li>服务端和客户端可以直接使用<code>json</code>，便于维护，而不同客户端解析<code>xml</code>可能使用不同方法</li><li><code>json</code> 已成为当前服务器与 <code>web</code> 应用之间数据传输的公认标准</li></ul><p><code>xml</code>的应用领域</p><ul><li><code>xml</code>格式较为严谨，可读性更强，更易于拓展，可以良好的做配置文件</li><li>出现较早，在各个领域有广泛的应用，具有普遍的流行性</li></ul><h4 id="json语法规则" tabindex="-1"><code>json</code>语法规则 <a class="header-anchor" href="#json语法规则" aria-label="Permalink to &quot;\`json\`语法规则&quot;">​</a></h4><p><code>json</code>语法是<code>JavaScript</code>语法的<strong>子集</strong>，而<code>json</code>一般也是用来传输<code>对象</code>和<code>数组</code>。也就是<code>json</code>语法是<code>JavaScript</code>语法的一部分(满足特定语法的<code>JavaScript</code>语法)</p><ul><li>数据保存在名称、值对中，数据由逗号分隔</li><li>花括号表示对象</li><li>中括号表示数组</li></ul><h4 id="json名称-值" tabindex="-1"><code>json</code>名称/值 <a class="header-anchor" href="#json名称-值" aria-label="Permalink to &quot;\`json\`名称/值&quot;">​</a></h4><p><code>json</code> 数据的书写格式为：<code>&quot;名称&quot;:&quot;值&quot;</code>。 对应<code>JavaScript</code>的概念就是：<code>名称=&quot;值&quot;</code> 但<code>json</code>的格式和<code>JavaScript</code>对象格式还是有所区别：</p><ul><li><code>JavaScript</code>对象的名称可以不加引号，也可以单引号，也可以双引号，但<code>json</code>字符串的名称只能加双引号的字符表示。</li><li><code>JavaScript</code>对象的键值可以是除<code>json</code>值之外还可以是函数等其他类型数据，而<code>json</code>字符串的值对只能是<strong>数字、字符串(要双引号)、逻辑值、对象(加大括号)、数组(中括号)、<code>null</code></strong>。</li></ul><h4 id="json对象" tabindex="-1"><code>json</code>对象 <a class="header-anchor" href="#json对象" aria-label="Permalink to &quot;\`json\`对象&quot;">​</a></h4><p><strong><code>json</code>有两种表示结构—对象和数组</strong>，通过这两种表示结构可以表示更复杂的结构。对比<code>java</code>的话<code>json</code>数组和<code>json</code>对象就好比<code>java</code>的列表/数组(<code>Object</code>类型)和对象(<code>Map</code>)一样的关系。并且很多情况其对象值可能相互嵌套多层，对对象中存在对象，对象中存在数组，数组中存在对象</p><h4 id="javascript对象-json对象-json字符串" tabindex="-1"><code>JavaScript</code>对象 / <code>json</code>对象 / <code>json</code>字符串 <a class="header-anchor" href="#javascript对象-json对象-json字符串" aria-label="Permalink to &quot;\`JavaScript\`对象 / \`json\`对象 / \`json\`字符串&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//JavaScript对象, 除了字符串、数字、true、false、null和undefined之外，JavaScript中的值都是对象</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a1</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{ name:</span><span style="color:#9ECBFF;">&quot;pky&quot;</span><span style="color:#E1E4E8;"> , sex:</span><span style="color:#9ECBFF;">&quot;man&quot;</span><span style="color:#E1E4E8;">, value: </span><span style="color:#79B8FF;">12345</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a2</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&#39;pky&#39;</span><span style="color:#E1E4E8;"> , </span><span style="color:#9ECBFF;">&#39;sex&#39;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&#39;man&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;value&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">12345</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#6A737D;">//满足json格式的JavaScript对象, json对象</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a3</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;pky&quot;</span><span style="color:#E1E4E8;"> , </span><span style="color:#9ECBFF;">&quot;sex&quot;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;man&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;value&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">12345</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#6A737D;">//json字符串</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a4</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;{&quot;name&quot;:&quot;pky&quot; , &quot;sex&quot;:&quot;man&quot;, &quot;value&quot;: 12345}&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//JavaScript对象, 除了字符串、数字、true、false、null和undefined之外，JavaScript中的值都是对象</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a1</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{ name:</span><span style="color:#032F62;">&quot;pky&quot;</span><span style="color:#24292E;"> , sex:</span><span style="color:#032F62;">&quot;man&quot;</span><span style="color:#24292E;">, value: </span><span style="color:#005CC5;">12345</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a2</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;pky&#39;</span><span style="color:#24292E;"> , </span><span style="color:#032F62;">&#39;sex&#39;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;man&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;value&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">12345</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6A737D;">//满足json格式的JavaScript对象, json对象</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a3</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;pky&quot;</span><span style="color:#24292E;"> , </span><span style="color:#032F62;">&quot;sex&quot;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;man&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;value&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">12345</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6A737D;">//json字符串</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a4</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;{&quot;name&quot;:&quot;pky&quot; , &quot;sex&quot;:&quot;man&quot;, &quot;value&quot;: 12345}&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p><code>json</code>主要缺点是非字符串的编码效率比较低，上面的数据比如<code>value</code>字段的值，在内存中是<code>12345</code>，占用2字节，<code>json</code>编码转变为<code>json字符串</code>之后占用5字节</p><h2 id="protobuf" tabindex="-1"><code>Protobuf</code> <a class="header-anchor" href="#protobuf" aria-label="Permalink to &quot;\`Protobuf\`&quot;">​</a></h2><p><code>Protobuf</code> 一方面选用了 <code>VarInts</code> 对数字进行编码，解决了效率问题；另一方面给每个字段指定一个整数编号，传输的时候只传字段编号，解决冗余问题</p><h4 id="数据编码" tabindex="-1">数据编码 <a class="header-anchor" href="#数据编码" aria-label="Permalink to &quot;数据编码&quot;">​</a></h4><p><code>protobuf</code>使用<code>.proto</code>文件作为编号与字段映射关系的对照表</p><div class="language-protobuf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">protobuf</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">message Demo {</span></span>
<span class="line"><span style="color:#e1e4e8;">  int32 i = 1;</span></span>
<span class="line"><span style="color:#e1e4e8;">  string s = 2;</span></span>
<span class="line"><span style="color:#e1e4e8;">  bool b = 3;</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">message Demo {</span></span>
<span class="line"><span style="color:#24292e;">  int32 i = 1;</span></span>
<span class="line"><span style="color:#24292e;">  string s = 2;</span></span>
<span class="line"><span style="color:#24292e;">  bool b = 3;</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p>每个字段后面的数字是<code>tag</code>，不能重复，和字段一一对应</p><p><code>Protobuf </code>提供了一系列工具，为 <code>proto </code>描述的 <code>message </code>生成各种语言的代码</p><h4 id="请求映射" tabindex="-1">请求映射 <a class="header-anchor" href="#请求映射" aria-label="Permalink to &quot;请求映射&quot;">​</a></h4><p><code>proto</code>文件作为<code>IDL</code>，可以做到<code>RPC</code>描述，比如最简单的一个<code>hello.proto</code>文件如下</p><div class="language-protobuf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">protobuf</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">package demo.hello;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">service Greeter {</span></span>
<span class="line"><span style="color:#e1e4e8;">  rpc SayHello (HelloRequest) returns (HelloReply) {}</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">message HelloRequest {</span></span>
<span class="line"><span style="color:#e1e4e8;">  string name = 1;</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">message HelloReply {</span></span>
<span class="line"><span style="color:#e1e4e8;">  string message = 1;</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">package demo.hello;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">service Greeter {</span></span>
<span class="line"><span style="color:#24292e;">  rpc SayHello (HelloRequest) returns (HelloReply) {}</span></span>
<span class="line"><span style="color:#24292e;">}</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">message HelloRequest {</span></span>
<span class="line"><span style="color:#24292e;">  string name = 1;</span></span>
<span class="line"><span style="color:#24292e;">}</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">message HelloReply {</span></span>
<span class="line"><span style="color:#24292e;">  string message = 1;</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p>定义了一个 <code>Greeter</code> 服务，其中有一个 <code>SayHello</code> 的方法，接受 <code>HelloRequest</code> 消息并返回 <code>HelloReply</code> 消息</p><p>一个<code>gRPC</code> 定义包含三个部分，包名、服务名和接口名，连接规则如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">/\${包名}.\${服务名}/\${接口名}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">/\${包名}.\${服务名}/\${接口名}</span></span></code></pre></div><p>上述<code>hello.proto</code>的包名是<code>demo.hello</code>，服务名是<code>Greeter</code>，接口名是<code>SayHello</code>，所以对应的路径就是 <code>/demo.hello.Greeter/SayHello</code></p><p><code>gRPC</code> 协议规定<code>Content-Typeheader </code>的取值为<code>application/grpc</code>或者<code>application/grpc+proto</code>，使用 <code>JSON</code> 编码，可以设成<code>application/grpc+json</code></p><h4 id="grpc的流式接口" tabindex="-1"><code>gRPC</code>的流式接口 <a class="header-anchor" href="#grpc的流式接口" aria-label="Permalink to &quot;\`gRPC\`的流式接口&quot;">​</a></h4><p><code>gRPC</code>可以源源不断收发消息，有别于<code>HTTP/1.1</code>的一收一发模式</p><p><code>gRPC</code> 持三种流式接口，定义的办法就是在参数前加上 <code>stream</code> 关键字，流类型包含如下</p><ul><li><p>请求流：在 <code>RPC</code> 发起之后不断发送新的请求消息，场景有发推送或者短信</p></li><li><p>响应流：在 <code>RPC</code> 发起之后不断接收新的响应消息，场景有订阅消息通知</p></li><li><p>双向流：在 <code>RPC </code>发起之后同时收发消息，场景有实时语音转字幕</p></li></ul><p>对应<code>.proto</code>如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">service Greeter {</span></span>
<span class="line"><span style="color:#e1e4e8;">  rpc SayHello (HelloRequest) returns (HelloReply) {}</span></span>
<span class="line"><span style="color:#e1e4e8;">  rpc SayHello (stream HelloRequest) returns (HelloReply) {}</span></span>
<span class="line"><span style="color:#e1e4e8;">  rpc SayHello (HelloRequest) returns (stream HelloReply) {}</span></span>
<span class="line"><span style="color:#e1e4e8;">  rpc SayHello (stream HelloRequest) returns (stream HelloReply) {}</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">service Greeter {</span></span>
<span class="line"><span style="color:#24292e;">  rpc SayHello (HelloRequest) returns (HelloReply) {}</span></span>
<span class="line"><span style="color:#24292e;">  rpc SayHello (stream HelloRequest) returns (HelloReply) {}</span></span>
<span class="line"><span style="color:#24292e;">  rpc SayHello (HelloRequest) returns (stream HelloReply) {}</span></span>
<span class="line"><span style="color:#24292e;">  rpc SayHello (stream HelloRequest) returns (stream HelloReply) {}</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p>为了实现流式传输，<code>gRPC</code> 引入<code>Length-Prefixed Message</code>，同一个 <code>gRPC</code> 请求的不同消息共用 <code>HTTP</code> 头信息，给每个消息单独加一个五字节的前缀来表示压缩和长度信息，第一个字节表示字节流是否被压缩，后四个字节存储数据长度</p><p>非流式<code>gRPC</code>请求格式</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">POST /demo.hello.Greeter/SayHello HTTP/1.1</span></span>
<span class="line"><span style="color:#e1e4e8;">Host: grpc.demo.com</span></span>
<span class="line"><span style="color:#e1e4e8;">Content-Type: application/grpc</span></span>
<span class="line"><span style="color:#e1e4e8;">Content-Length: 1234</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;Length-Prefixed Message&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">POST /demo.hello.Greeter/SayHello HTTP/1.1</span></span>
<span class="line"><span style="color:#24292e;">Host: grpc.demo.com</span></span>
<span class="line"><span style="color:#24292e;">Content-Type: application/grpc</span></span>
<span class="line"><span style="color:#24292e;">Content-Length: 1234</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">&lt;Length-Prefixed Message&gt;</span></span></code></pre></div><p>非流式<code>gRPC</code>返回格式</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">HTTP/1.1 200 OK</span></span>
<span class="line"><span style="color:#e1e4e8;">Content-Length: 5678</span></span>
<span class="line"><span style="color:#e1e4e8;">Content-Type: application/grpc</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;Length-Prefixed Message&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">HTTP/1.1 200 OK</span></span>
<span class="line"><span style="color:#24292e;">Content-Length: 5678</span></span>
<span class="line"><span style="color:#24292e;">Content-Type: application/grpc</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">&lt;Length-Prefixed Message&gt;</span></span></code></pre></div><p>非流式<code>gRPC</code>调用，跟普通的 <code>HTTP</code> 请求也没有太大区别，可以使用 <code>HTTP/1.1</code> 来承载 <code>gRPC</code> 流量</p><p>流式<code>gRPC</code>请求格式，如下，请求分为<code>header frame</code>和<code>data frame</code>，共计传输两个<code>frame</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">HEADERS (flags = END_HEADERS) # header frame</span></span>
<span class="line"><span style="color:#e1e4e8;">:method = POST</span></span>
<span class="line"><span style="color:#e1e4e8;">:scheme = http</span></span>
<span class="line"><span style="color:#e1e4e8;">:path = /demo.hello.Greeter/SayHello</span></span>
<span class="line"><span style="color:#e1e4e8;">:authority = grpc.demo.com</span></span>
<span class="line"><span style="color:#e1e4e8;">content-type = application/grpc+proto</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">DATA (flags = END_STREAM) # data frame</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;Length-Prefixed Message&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">HEADERS (flags = END_HEADERS) # header frame</span></span>
<span class="line"><span style="color:#24292e;">:method = POST</span></span>
<span class="line"><span style="color:#24292e;">:scheme = http</span></span>
<span class="line"><span style="color:#24292e;">:path = /demo.hello.Greeter/SayHello</span></span>
<span class="line"><span style="color:#24292e;">:authority = grpc.demo.com</span></span>
<span class="line"><span style="color:#24292e;">content-type = application/grpc+proto</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">DATA (flags = END_STREAM) # data frame</span></span>
<span class="line"><span style="color:#24292e;">&lt;Length-Prefixed Message&gt;</span></span></code></pre></div><p>流式<code>gRPC</code>响应，共传输3个<code>frame</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">HEADERS (flags = END_HEADERS) # header frame</span></span>
<span class="line"><span style="color:#e1e4e8;">:status = 200</span></span>
<span class="line"><span style="color:#e1e4e8;">content-type = application/grpc+proto</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">DATA # data frame</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;Length-Prefixed Message&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">HEADERS (flags = END_STREAM, END_HEADERS) # header frame</span></span>
<span class="line"><span style="color:#e1e4e8;">grpc-status = 0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">HEADERS (flags = END_HEADERS) # header frame</span></span>
<span class="line"><span style="color:#24292e;">:status = 200</span></span>
<span class="line"><span style="color:#24292e;">content-type = application/grpc+proto</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">DATA # data frame</span></span>
<span class="line"><span style="color:#24292e;">&lt;Length-Prefixed Message&gt;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">HEADERS (flags = END_STREAM, END_HEADERS) # header frame</span></span>
<span class="line"><span style="color:#24292e;">grpc-status = 0</span></span></code></pre></div><p>流式<code>gRPC</code>使用<code>HTTP/2</code> ，请求与响应的 <code>header</code> 和 <code>data</code> 使用独立的 <code>frame</code></p><h2 id="grpc的rust实践helloworld" tabindex="-1"><code>gRPC</code>的<code>rust</code>实践<code>helloworld</code> <a class="header-anchor" href="#grpc的rust实践helloworld" aria-label="Permalink to &quot;\`gRPC\`的\`rust\`实践\`helloworld\`&quot;">​</a></h2><p>依赖项目<code>tonic</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">https://github.com/hyperium/tonic</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">https://github.com/hyperium/tonic</span></span></code></pre></div><p>创建一个项目<code>hello</code></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cargo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hello</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cargo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hello</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span></span></code></pre></div><p>先安装 <code>protoc Protocol Buffers</code> 编译器以及 <code>Protocol Buffers</code> 资源文件</p><p><code>Ubuntu</code></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">apt</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">update</span><span style="color:#E1E4E8;"> &amp;&amp; </span><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">apt</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">upgrade</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-y</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">apt</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-y</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">protobuf-compiler</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">libprotobuf-dev</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">apt</span><span style="color:#24292E;"> </span><span style="color:#032F62;">update</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">apt</span><span style="color:#24292E;"> </span><span style="color:#032F62;">upgrade</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-y</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">apt</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-y</span><span style="color:#24292E;"> </span><span style="color:#032F62;">protobuf-compiler</span><span style="color:#24292E;"> </span><span style="color:#032F62;">libprotobuf-dev</span></span></code></pre></div><p>定义一个<code>helloworld.proto</code>文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">$ mkdir proto</span></span>
<span class="line"><span style="color:#e1e4e8;">$ touch proto/helloworld.proto</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">$ mkdir proto</span></span>
<span class="line"><span style="color:#24292e;">$ touch proto/helloworld.proto</span></span></code></pre></div><div class="language-protobuf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">protobuf</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">syntax = &quot;proto3&quot;;</span></span>
<span class="line"><span style="color:#e1e4e8;">package helloworld;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">service Greeter {</span></span>
<span class="line"><span style="color:#e1e4e8;">    rpc SayHello (HelloRequest) returns (HelloReply);</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">message HelloRequest {</span></span>
<span class="line"><span style="color:#e1e4e8;">   string name = 1;</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">message HelloReply {</span></span>
<span class="line"><span style="color:#e1e4e8;">    string message = 1;</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">syntax = &quot;proto3&quot;;</span></span>
<span class="line"><span style="color:#24292e;">package helloworld;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">service Greeter {</span></span>
<span class="line"><span style="color:#24292e;">    rpc SayHello (HelloRequest) returns (HelloReply);</span></span>
<span class="line"><span style="color:#24292e;">}</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">message HelloRequest {</span></span>
<span class="line"><span style="color:#24292e;">   string name = 1;</span></span>
<span class="line"><span style="color:#24292e;">}</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">message HelloReply {</span></span>
<span class="line"><span style="color:#24292e;">    string message = 1;</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p>修改<code>Cargo.toml</code>新增如下</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">dependencies</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#6A737D;"># 用于从proto2/proto3文件生成rust 代码</span></span>
<span class="line"><span style="color:#E1E4E8;">prost = </span><span style="color:#9ECBFF;">&quot;0.11&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">tokio = { version = </span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">, features = [</span><span style="color:#9ECBFF;">&quot;full&quot;</span><span style="color:#E1E4E8;">] }</span></span>
<span class="line"><span style="color:#E1E4E8;">tonic = </span><span style="color:#9ECBFF;">&quot;0.9&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">build-dependencies</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#6A737D;"># 用于在build阶段生成gRPC的客户端和服务端代码</span></span>
<span class="line"><span style="color:#E1E4E8;">tonic-build = </span><span style="color:#9ECBFF;">&quot;0.9&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">dependencies</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;"># 用于从proto2/proto3文件生成rust 代码</span></span>
<span class="line"><span style="color:#24292E;">prost = </span><span style="color:#032F62;">&quot;0.11&quot;</span></span>
<span class="line"><span style="color:#24292E;">tokio = { version = </span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">, features = [</span><span style="color:#032F62;">&quot;full&quot;</span><span style="color:#24292E;">] }</span></span>
<span class="line"><span style="color:#24292E;">tonic = </span><span style="color:#032F62;">&quot;0.9&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">build-dependencies</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;"># 用于在build阶段生成gRPC的客户端和服务端代码</span></span>
<span class="line"><span style="color:#24292E;">tonic-build = </span><span style="color:#032F62;">&quot;0.9&quot;</span></span></code></pre></div><p>在项目根路径下创建一个<code>build.rs</code>用于编译时生成代码</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Result</span><span style="color:#E1E4E8;">&lt;(), </span><span style="color:#B392F0;">Box</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">dyn</span><span style="color:#E1E4E8;"> std</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">error</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">tonic_build</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">compile_protos</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;proto/helloworld.proto&quot;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Ok</span><span style="color:#E1E4E8;">(())</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Result</span><span style="color:#24292E;">&lt;(), </span><span style="color:#6F42C1;">Box</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">dyn</span><span style="color:#24292E;"> std</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">error</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">tonic_build</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">compile_protos</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;proto/helloworld.proto&quot;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Ok</span><span style="color:#24292E;">(())</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>编写服务端代码<code>src/bin/server.rs</code></p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tonic</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">{</span><span style="color:#B392F0;">transport</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Server</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Request</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Response</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Status</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hello_world</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">greeter_server</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">{</span><span style="color:#B392F0;">Greeter</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">GreeterServer</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hello_world</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">{</span><span style="color:#B392F0;">HelloReply</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">HelloRequest</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">mod</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hello_world</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">tonic</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">include_proto!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;helloworld&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">#[derive(</span><span style="color:#B392F0;">Default</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyGreeter</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">#[tonic</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">async_trait]</span></span>
<span class="line"><span style="color:#F97583;">impl</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Greeter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyGreeter</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">say_hello</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&amp;</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        request</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Request</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">HelloRequest</span><span style="color:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Result</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Response</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">HelloReply</span><span style="color:#E1E4E8;">&gt;, </span><span style="color:#B392F0;">Status</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Got a request from {:?}&quot;</span><span style="color:#E1E4E8;">, request</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">remote_addr</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> reply </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hello_world</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">HelloReply</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            message</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">format!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello {}!&quot;</span><span style="color:#E1E4E8;">, request</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">into_inner</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">name),</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">Ok</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Response</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(reply))</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">#[tokio</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">main]</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Result</span><span style="color:#E1E4E8;">&lt;(), </span><span style="color:#B392F0;">Box</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">dyn</span><span style="color:#E1E4E8;"> std</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">error</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> addr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;[::1]:50051&quot;</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">unwrap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> greeter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyGreeter</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;GreeterServer listening on {}&quot;</span><span style="color:#E1E4E8;">, addr);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Server</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">add_service</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">GreeterServer</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(greeter))</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">serve</span><span style="color:#E1E4E8;">(addr)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.await?</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Ok</span><span style="color:#E1E4E8;">(())</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tonic</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">{</span><span style="color:#6F42C1;">transport</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Server</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Request</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Response</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Status</span><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hello_world</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">greeter_server</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">{</span><span style="color:#6F42C1;">Greeter</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">GreeterServer</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hello_world</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">{</span><span style="color:#6F42C1;">HelloReply</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">HelloRequest</span><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">mod</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hello_world</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">tonic</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">include_proto!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;helloworld&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">#[derive(</span><span style="color:#6F42C1;">Default</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyGreeter</span><span style="color:#24292E;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">#[tonic</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">async_trait]</span></span>
<span class="line"><span style="color:#D73A49;">impl</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Greeter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyGreeter</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">say_hello</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&amp;</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        request</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Request</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">HelloRequest</span><span style="color:#24292E;">&gt;,</span></span>
<span class="line"><span style="color:#24292E;">    ) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Result</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Response</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">HelloReply</span><span style="color:#24292E;">&gt;, </span><span style="color:#6F42C1;">Status</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Got a request from {:?}&quot;</span><span style="color:#24292E;">, request</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">remote_addr</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> reply </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hello_world</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">HelloReply</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            message</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">format!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello {}!&quot;</span><span style="color:#24292E;">, request</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">into_inner</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">name),</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">Ok</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Response</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(reply))</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">#[tokio</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">main]</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Result</span><span style="color:#24292E;">&lt;(), </span><span style="color:#6F42C1;">Box</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">dyn</span><span style="color:#24292E;"> std</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">error</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> addr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;[::1]:50051&quot;</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">unwrap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> greeter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyGreeter</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">default</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;GreeterServer listening on {}&quot;</span><span style="color:#24292E;">, addr);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Server</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">add_service</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">GreeterServer</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(greeter))</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">serve</span><span style="color:#24292E;">(addr)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.await?</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Ok</span><span style="color:#24292E;">(())</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>客户端代码</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hello_world</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">greeter_client</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">GreeterClient</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hello_world</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">HelloRequest</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">mod</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hello_world</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">tonic</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">include_proto!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;helloworld&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">#[tokio</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">main]</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Result</span><span style="color:#E1E4E8;">&lt;(), </span><span style="color:#B392F0;">Box</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">dyn</span><span style="color:#E1E4E8;"> std</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">error</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> client </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GreeterClient</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;http://[::1]:50051&quot;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">.await?</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">..</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tonic</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Request</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">HelloRequest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">format!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Tonic {i}&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">say_hello</span><span style="color:#E1E4E8;">(request)</span><span style="color:#F97583;">.await?</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;RESPONSE={:?}&quot;</span><span style="color:#E1E4E8;">, response);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Ok</span><span style="color:#E1E4E8;">(())</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hello_world</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">greeter_client</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">GreeterClient</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hello_world</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">HelloRequest</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">mod</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hello_world</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">tonic</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">include_proto!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;helloworld&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">#[tokio</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">main]</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Result</span><span style="color:#24292E;">&lt;(), </span><span style="color:#6F42C1;">Box</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">dyn</span><span style="color:#24292E;"> std</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">error</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">mut</span><span style="color:#24292E;"> client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GreeterClient</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;http://[::1]:50051&quot;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">.await?</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">..</span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tonic</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Request</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">HelloRequest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">format!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Tonic {i}&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">say_hello</span><span style="color:#24292E;">(request)</span><span style="color:#D73A49;">.await?</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;RESPONSE={:?}&quot;</span><span style="color:#24292E;">, response);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Ok</span><span style="color:#24292E;">(())</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后整个项目的结构如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">.</span></span>
<span class="line"><span style="color:#e1e4e8;">├── build.rs</span></span>
<span class="line"><span style="color:#e1e4e8;">├── Cargo.lock</span></span>
<span class="line"><span style="color:#e1e4e8;">├── Cargo.toml</span></span>
<span class="line"><span style="color:#e1e4e8;">├── proto</span></span>
<span class="line"><span style="color:#e1e4e8;">│   └── helloworld.proto</span></span>
<span class="line"><span style="color:#e1e4e8;">└── src</span></span>
<span class="line"><span style="color:#e1e4e8;">    ├── bin</span></span>
<span class="line"><span style="color:#e1e4e8;">    │   ├── client.rs</span></span>
<span class="line"><span style="color:#e1e4e8;">    │   └── server.rs</span></span>
<span class="line"><span style="color:#e1e4e8;">    └── main.rs</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">.</span></span>
<span class="line"><span style="color:#24292e;">├── build.rs</span></span>
<span class="line"><span style="color:#24292e;">├── Cargo.lock</span></span>
<span class="line"><span style="color:#24292e;">├── Cargo.toml</span></span>
<span class="line"><span style="color:#24292e;">├── proto</span></span>
<span class="line"><span style="color:#24292e;">│   └── helloworld.proto</span></span>
<span class="line"><span style="color:#24292e;">└── src</span></span>
<span class="line"><span style="color:#24292e;">    ├── bin</span></span>
<span class="line"><span style="color:#24292e;">    │   ├── client.rs</span></span>
<span class="line"><span style="color:#24292e;">    │   └── server.rs</span></span>
<span class="line"><span style="color:#24292e;">    └── main.rs</span></span></code></pre></div><p>启动服务端</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cargo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--bin</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">server</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cargo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--bin</span><span style="color:#24292E;"> </span><span style="color:#032F62;">server</span></span></code></pre></div><p>新开终端，启动客户端</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cargo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--bin</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">client</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Finished</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dev</span><span style="color:#E1E4E8;"> [unoptimized </span><span style="color:#9ECBFF;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">debuginfo]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">target</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">s</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.06</span><span style="color:#9ECBFF;">s</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#B392F0;">Running</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`</span><span style="color:#B392F0;">target/debug/client</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#E1E4E8;">RESPONSE</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">Response</span><span style="color:#E1E4E8;"> { </span><span style="color:#B392F0;">metadata:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">MetadataMap</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">headers:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{&quot;content-type&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;application/grpc&quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;date&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Thu, 24 Aug 2023 06:54:10 GMT&quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;grpc-status&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;0&quot;}</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">},</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">message:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">HelloReply</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">message:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Hello Tonic 0!&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">},</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">extensions:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Extensions</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">RESPONSE</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">Response</span><span style="color:#E1E4E8;"> { </span><span style="color:#B392F0;">metadata:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">MetadataMap</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">headers:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{&quot;content-type&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;application/grpc&quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;date&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Thu, 24 Aug 2023 06:54:10 GMT&quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;grpc-status&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;0&quot;}</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">},</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">message:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">HelloReply</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">message:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Hello Tonic 1!&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">},</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">extensions:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Extensions</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">RESPONSE</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">Response</span><span style="color:#E1E4E8;"> { </span><span style="color:#B392F0;">metadata:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">MetadataMap</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">headers:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{&quot;content-type&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;application/grpc&quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;date&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Thu, 24 Aug 2023 06:54:10 GMT&quot;,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;grpc-status&quot;:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;0&quot;}</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">},</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">message:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">HelloReply</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">message:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Hello Tonic 2!&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">},</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">extensions:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Extensions</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cargo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--bin</span><span style="color:#24292E;"> </span><span style="color:#032F62;">client</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Finished</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dev</span><span style="color:#24292E;"> [unoptimized </span><span style="color:#032F62;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">debuginfo]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">target</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">s</span><span style="color:#24292E;">) </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.06</span><span style="color:#032F62;">s</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6F42C1;">Running</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span><span style="color:#6F42C1;">target/debug/client</span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#24292E;">RESPONSE</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">Response</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">metadata:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">MetadataMap</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{</span><span style="color:#24292E;"> </span><span style="color:#032F62;">headers:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{&quot;content-type&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;application/grpc&quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;date&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Thu, 24 Aug 2023 06:54:10 GMT&quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;grpc-status&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;0&quot;}</span><span style="color:#24292E;"> </span><span style="color:#032F62;">},</span><span style="color:#24292E;"> </span><span style="color:#032F62;">message:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">HelloReply</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{</span><span style="color:#24292E;"> </span><span style="color:#032F62;">message:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello Tonic 0!&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">},</span><span style="color:#24292E;"> </span><span style="color:#032F62;">extensions:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Extensions</span><span style="color:#24292E;"> </span><span style="color:#032F62;">}</span></span>
<span class="line"><span style="color:#24292E;">RESPONSE</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">Response</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">metadata:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">MetadataMap</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{</span><span style="color:#24292E;"> </span><span style="color:#032F62;">headers:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{&quot;content-type&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;application/grpc&quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;date&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Thu, 24 Aug 2023 06:54:10 GMT&quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;grpc-status&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;0&quot;}</span><span style="color:#24292E;"> </span><span style="color:#032F62;">},</span><span style="color:#24292E;"> </span><span style="color:#032F62;">message:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">HelloReply</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{</span><span style="color:#24292E;"> </span><span style="color:#032F62;">message:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello Tonic 1!&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">},</span><span style="color:#24292E;"> </span><span style="color:#032F62;">extensions:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Extensions</span><span style="color:#24292E;"> </span><span style="color:#032F62;">}</span></span>
<span class="line"><span style="color:#24292E;">RESPONSE</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">Response</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">metadata:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">MetadataMap</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{</span><span style="color:#24292E;"> </span><span style="color:#032F62;">headers:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{&quot;content-type&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;application/grpc&quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;date&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Thu, 24 Aug 2023 06:54:10 GMT&quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;grpc-status&quot;:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;0&quot;}</span><span style="color:#24292E;"> </span><span style="color:#032F62;">},</span><span style="color:#24292E;"> </span><span style="color:#032F62;">message:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">HelloReply</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{</span><span style="color:#24292E;"> </span><span style="color:#032F62;">message:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello Tonic 2!&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">},</span><span style="color:#24292E;"> </span><span style="color:#032F62;">extensions:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Extensions</span><span style="color:#24292E;"> </span><span style="color:#032F62;">}</span></span></code></pre></div><p>查看服务端输出如下</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cargo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--bin</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">server</span></span>
<span class="line"><span style="color:#79B8FF;">....</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Finished</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dev</span><span style="color:#E1E4E8;"> [unoptimized </span><span style="color:#9ECBFF;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">debuginfo]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">target</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">s</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.06</span><span style="color:#9ECBFF;">s</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#B392F0;">Running</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`</span><span style="color:#B392F0;">target/debug/server</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#B392F0;">GreeterServer</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">listening</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">on</span><span style="color:#E1E4E8;"> [::1]:50051</span></span>
<span class="line"><span style="color:#B392F0;">Got</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">request</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Some</span><span style="color:#E1E4E8;">([::1]:54820)</span></span>
<span class="line"><span style="color:#B392F0;">Got</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">request</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Some</span><span style="color:#E1E4E8;">([::1]:54820)</span></span>
<span class="line"><span style="color:#B392F0;">Got</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">request</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Some</span><span style="color:#E1E4E8;">([::1]:54820)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cargo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--bin</span><span style="color:#24292E;"> </span><span style="color:#032F62;">server</span></span>
<span class="line"><span style="color:#005CC5;">....</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Finished</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dev</span><span style="color:#24292E;"> [unoptimized </span><span style="color:#032F62;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">debuginfo]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">target</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">s</span><span style="color:#24292E;">) </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.06</span><span style="color:#032F62;">s</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6F42C1;">Running</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span><span style="color:#6F42C1;">target/debug/server</span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#6F42C1;">GreeterServer</span><span style="color:#24292E;"> </span><span style="color:#032F62;">listening</span><span style="color:#24292E;"> </span><span style="color:#032F62;">on</span><span style="color:#24292E;"> [::1]:50051</span></span>
<span class="line"><span style="color:#6F42C1;">Got</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">request</span><span style="color:#24292E;"> </span><span style="color:#032F62;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Some</span><span style="color:#24292E;">([::1]:54820)</span></span>
<span class="line"><span style="color:#6F42C1;">Got</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">request</span><span style="color:#24292E;"> </span><span style="color:#032F62;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Some</span><span style="color:#24292E;">([::1]:54820)</span></span>
<span class="line"><span style="color:#6F42C1;">Got</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">request</span><span style="color:#24292E;"> </span><span style="color:#032F62;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Some</span><span style="color:#24292E;">([::1]:54820)</span></span></code></pre></div><p>配置<code>wireshark</code>的<code>proto buffers</code>加载<code>.proto</code>文件路径</p><p>配置<code>分析(A)</code>的<code>解码为(decode as)</code>，配置解析<code>TCP</code>的<code>50051</code>端口为<code>HTTP2</code>协议</p><p>使用<code>wireshark</code>抓包如下</p><p><img src="`+o+'" alt="wireshark"></p><p>有以下几点需要注意</p><ul><li>可以看到共有一次<code>TCP</code>三次握手以及一次挥手断开</li><li><code>TCP</code>连接建立成功之后，会发送一个<code>Magic</code>帧，之后紧跟着<code>SETTINGS</code>帧（帧<code>类型 = 0x4</code>递影响端点通信方式的配置参数，例如设置对端行为的首选项和约束）</li><li>每个<code>gRPC</code>包里面会有多个<code>stream</code></li></ul><h2 id="阅读参考" tabindex="-1">阅读参考 <a class="header-anchor" href="#阅读参考" aria-label="Permalink to &quot;阅读参考&quot;">​</a></h2><p><a href="https://taoshu.in/grpc.html" target="_blank" rel="noreferrer">理解 <code>gRPC</code> 协议</a></p><p><a href="https://zhuanlan.zhihu.com/p/166303801" target="_blank" rel="noreferrer"><code>json</code>从入门到实践</a></p><p><a href="https://www.cnblogs.com/jiujuan/p/16939688.html" target="_blank" rel="noreferrer"><code>HTTP2</code> 协议长文详解</a></p><p><a href="https://github.com/hyperium/tonic/blob/master/examples/helloworld-tutorial.md" target="_blank" rel="noreferrer"><code>tonic hello world readme</code></a></p><p><a href="https://halfrost.com/http2-http-frames-definitions/#toc-0" target="_blank" rel="noreferrer"><code>HTTP2</code>帧定义</a></p>',98),c=[e];function t(r,y,E,i,d,F){return n(),a("div",null,c)}const C=s(p,[["render",t]]);export{g as __pageData,C as default};
