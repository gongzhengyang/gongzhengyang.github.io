import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.36bc40e2.js";const p="/assets/apache-parquet.21672a68.gif",C=JSON.parse('{"title":"简介","description":"","frontmatter":{},"headers":[],"relativePath":"published/database/ApacheArrow-Parquet存储.md","filePath":"published/database/ApacheArrow-Parquet存储.md","lastUpdated":1700106669000}'),o={name:"published/database/ApacheArrow-Parquet存储.md"},e=l('<h1 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h1><p><code>Parquet</code>是一种高效的列式存储格式，广泛用于大数据系统中的数据仓库和数据管理工具中，旨在提高数据分析的性能和效率，能够更好地支持数据压缩和列式查询，同时兼顾读写速度和数据大小</p><h2 id="初衷" tabindex="-1">初衷 <a class="header-anchor" href="#初衷" aria-label="Permalink to &quot;初衷&quot;">​</a></h2><p>为了让 <code>Hadoop</code> 生态系统中的任何项目都能利用压缩、高效的列式数据表示的优势</p><h2 id="技术与原理" tabindex="-1">技术与原理 <a class="header-anchor" href="#技术与原理" aria-label="Permalink to &quot;技术与原理&quot;">​</a></h2><p>基于列存储和压缩技术，每一列的数据通过一系列压缩算法进行压缩，然后存储到文件系统中，这种方式能够避免存储冗余数据，并且能够使查询只涉及到所需的列，从而大大提高查询效率</p><h2 id="相关术语" tabindex="-1">相关术语 <a class="header-anchor" href="#相关术语" aria-label="Permalink to &quot;相关术语&quot;">​</a></h2><ul><li><p><code>Block</code>（<code>hdfs Block</code>）：<code>hdfs</code>中的数据块</p></li><li><p><code>File</code>：<code>hdfs</code> 文件，包含文件的元数据，不需要包含实际的数据</p></li><li><p><code>Row group</code>/行组：将数据水平划分为<code>Row group</code></p></li><li><p><code>Column chunk</code>：特定列的数据块，它们位于特定的行组中，并保证在文件中是连续的</p></li><li><p><code>Page</code>：列块被分为页，页面在概念上是一个不可分割的单元（就压缩和编码而言），列块中可以有多种交错的页面类型，<code>Page</code>为了让数据读取的粒度足够小，便于单条数据或小批量数据的查询</p></li></ul><p>从层次结构上看，文件由一个或多个行组组成，行组的每列恰好包含一个列块，列块包含一页或多页</p><p>结构图如下</p><p><img src="'+p+`" alt="apache-parquet"></p><p>文件格式如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">4-byte magic number &quot;PAR1&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;Column 1 Chunk 1 + Column Metadata&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;Column 2 Chunk 1 + Column Metadata&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">...</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;Column N Chunk 1 + Column Metadata&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;Column 1 Chunk 2 + Column Metadata&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;Column 2 Chunk 2 + Column Metadata&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">...</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;Column N Chunk 2 + Column Metadata&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">...</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;Column 1 Chunk M + Column Metadata&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;Column 2 Chunk M + Column Metadata&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">...</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;Column N Chunk M + Column Metadata&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">File Metadata</span></span>
<span class="line"><span style="color:#e1e4e8;">4-byte length in bytes of file metadata</span></span>
<span class="line"><span style="color:#e1e4e8;">4-byte magic number &quot;PAR1&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">4-byte magic number &quot;PAR1&quot;</span></span>
<span class="line"><span style="color:#24292e;">&lt;Column 1 Chunk 1 + Column Metadata&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;Column 2 Chunk 1 + Column Metadata&gt;</span></span>
<span class="line"><span style="color:#24292e;">...</span></span>
<span class="line"><span style="color:#24292e;">&lt;Column N Chunk 1 + Column Metadata&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;Column 1 Chunk 2 + Column Metadata&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;Column 2 Chunk 2 + Column Metadata&gt;</span></span>
<span class="line"><span style="color:#24292e;">...</span></span>
<span class="line"><span style="color:#24292e;">&lt;Column N Chunk 2 + Column Metadata&gt;</span></span>
<span class="line"><span style="color:#24292e;">...</span></span>
<span class="line"><span style="color:#24292e;">&lt;Column 1 Chunk M + Column Metadata&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;Column 2 Chunk M + Column Metadata&gt;</span></span>
<span class="line"><span style="color:#24292e;">...</span></span>
<span class="line"><span style="color:#24292e;">&lt;Column N Chunk M + Column Metadata&gt;</span></span>
<span class="line"><span style="color:#24292e;">File Metadata</span></span>
<span class="line"><span style="color:#24292e;">4-byte length in bytes of file metadata</span></span>
<span class="line"><span style="color:#24292e;">4-byte magic number &quot;PAR1&quot;</span></span></code></pre></div><h2 id="header" tabindex="-1"><code>Header</code> <a class="header-anchor" href="#header" aria-label="Permalink to &quot;\`Header\`&quot;">​</a></h2><p><code>Header</code>的内容很少，只有4个字节，本质是一个<code>magic number</code>，用来指示文件类型</p><p><code>PAR1</code>：普通的<code>Parquet</code>文件</p><p><code>PARE</code>: 加密过的<code>Parquet</code>文件</p><h2 id="file-body" tabindex="-1"><code>File Body</code> <a class="header-anchor" href="#file-body" aria-label="Permalink to &quot;\`File Body\`&quot;">​</a></h2><p>实际存储数据，包含<code>Column Chunk</code>和<code>Column Metadata</code></p><h2 id="footer" tabindex="-1"><code>Footer</code> <a class="header-anchor" href="#footer" aria-label="Permalink to &quot;\`Footer\`&quot;">​</a></h2><ul><li><p>包含了诸如<code>schema</code>，<code>Block</code>的<code>offset</code>和<code>size</code>，<code>Column Chunk</code>的<code>offset</code>和<code>size</code>等所有重要的元数据</p></li><li><p>承担了整个文件入口的职责，读取<code>Parquet</code>文件的第一步就是读取<code>Footer</code>信息，转换成元数据之后，再根据这些元数据跳转到对应的<code>block</code>和<code>column</code>，读取真正所要的数据</p></li></ul><h2 id="index" tabindex="-1"><code>Index</code> <a class="header-anchor" href="#index" aria-label="Permalink to &quot;\`Index\`&quot;">​</a></h2><p><code>Index</code>是<code>Parquet</code>文件的索引块，主要为了支持谓词下推（<code>Predicate Pushdown</code>）功能</p><p>谓词下推是一种优化查询性能的技术，简单地来说就是把查询条件发给存储层，让存储层可以做初步的过滤，把肯定不满足查询条件的数据排除掉，从而减少数据的读取和传输量</p><p><code>Parquet</code>索引类型</p><ul><li><code>Max-Min</code>: <code>Max-Min</code>索引是对每个<code>Page</code>都记录它所含数据的最大值和最小值，这样某个<code>Page</code>是否不满足查询条件就可以通过这个<code>Page</code>的<code>max</code>和<code>min</code>值来判断</li><li><code>BloomFilter</code>索引: 针对<code>value</code>比较稀疏，<code>max-min</code>范围比较大的列，用<code>Max-Min</code>索引的效果就不太好，<code>BloomFilter</code>可以克服这一点，同时也可以用于单条数据的查询</li></ul><h2 id="rust读写parquet文件" tabindex="-1"><code>rust</code>读写<code>Parquet</code>文件 <a class="header-anchor" href="#rust读写parquet文件" aria-label="Permalink to &quot;\`rust\`读写\`Parquet\`文件&quot;">​</a></h2><p>依赖项目</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">https://github.com/apache/arrow-rs</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">https://github.com/apache/arrow-rs</span></span></code></pre></div><p>修改<code>Cargo.toml</code>如下</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">dependencies</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">parquet = </span><span style="color:#9ECBFF;">&quot;46.0.0&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">parquet_derive = </span><span style="color:#9ECBFF;">&quot;46.0.0&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">dependencies</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">parquet = </span><span style="color:#032F62;">&quot;46.0.0&quot;</span></span>
<span class="line"><span style="color:#24292E;">parquet_derive = </span><span style="color:#032F62;">&quot;46.0.0&quot;</span></span></code></pre></div><p>修改<code>main.rs</code></p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">convert</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">TryFrom</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">{fs, </span><span style="color:#B392F0;">path</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Path</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parquet</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">file</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">reader</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">SerializedFileReader</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parquet</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">file</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">writer</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">SerializedFileWriter</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parquet</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">record</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">RecordWriter</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">parquet_derive</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">ParquetRecordWriter</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">PARQUET_FILEPATH</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#B392F0;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./target/sample.parquet&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">#[derive(</span><span style="color:#B392F0;">ParquetRecordWriter</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ACompleteRecord</span><span style="color:#E1E4E8;">&lt;&#39;</span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> a_bool</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bool</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> a_str</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">&#39;</span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">str</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Path</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">PARQUET_FILEPATH</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fs</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">File</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(path)</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">unwrap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> samples </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">vec!</span><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">ACompleteRecord</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            a_bool</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            a_str</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;I&#39;m true&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">ACompleteRecord</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            a_bool</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            a_str</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;I&#39;m false&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">    ];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> schema </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> samples</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">as_slice</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">schema</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">unwrap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> writer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SerializedFileWriter</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(file, schema, </span><span style="color:#B392F0;">Default</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">())</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">unwrap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> row_group </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> writer</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">next_row_group</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">unwrap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    samples</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">as_slice</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">write_to_row_group</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;mut</span><span style="color:#E1E4E8;"> row_group)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">unwrap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    row_group</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">unwrap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    writer</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">unwrap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> rows </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">PARQUET_FILEPATH</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">iter</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">p</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SerializedFileReader</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">try_from</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">p)</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">unwrap</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">flat_map</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> r</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">into_iter</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> row </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> rows {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{}&quot;</span><span style="color:#E1E4E8;">, row</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">unwrap</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">convert</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">TryFrom</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">{fs, </span><span style="color:#6F42C1;">path</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Path</span><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parquet</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">file</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">reader</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">SerializedFileReader</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parquet</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">file</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">writer</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">SerializedFileWriter</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parquet</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">record</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">RecordWriter</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parquet_derive</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">ParquetRecordWriter</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">PARQUET_FILEPATH</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#6F42C1;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./target/sample.parquet&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">#[derive(</span><span style="color:#6F42C1;">ParquetRecordWriter</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ACompleteRecord</span><span style="color:#24292E;">&lt;&#39;</span><span style="color:#6F42C1;">a</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> a_bool</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bool</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> a_str</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">&#39;</span><span style="color:#6F42C1;">a</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">str</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Path</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">PARQUET_FILEPATH</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fs</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">File</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(path)</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">unwrap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> samples </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vec!</span><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">ACompleteRecord</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            a_bool</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            a_str</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;I&#39;m true&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">ACompleteRecord</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            a_bool</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            a_str</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;I&#39;m false&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">    ];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> schema </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> samples</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">as_slice</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">schema</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">unwrap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">mut</span><span style="color:#24292E;"> writer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SerializedFileWriter</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(file, schema, </span><span style="color:#6F42C1;">Default</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">default</span><span style="color:#24292E;">())</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">unwrap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">mut</span><span style="color:#24292E;"> row_group </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> writer</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">next_row_group</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">unwrap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    samples</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">as_slice</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">write_to_row_group</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;mut</span><span style="color:#24292E;"> row_group)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">unwrap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    row_group</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">unwrap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    writer</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">unwrap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> rows </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">PARQUET_FILEPATH</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">iter</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">p</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SerializedFileReader</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">try_from</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">p)</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">unwrap</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">flat_map</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> r</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">into_iter</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> row </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> rows {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{}&quot;</span><span style="color:#24292E;">, row</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">unwrap</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>运行</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cargo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;">   </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#B392F0;">Compiling</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">temp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">v0.1.0</span><span style="color:#E1E4E8;"> (/home/gong/rust-work/temp)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Finished</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dev</span><span style="color:#E1E4E8;"> [unoptimized </span><span style="color:#9ECBFF;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">debuginfo]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">target</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">s</span><span style="color:#E1E4E8;">) </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2.26</span><span style="color:#9ECBFF;">s</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#B392F0;">Running</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`</span><span style="color:#B392F0;">target/debug/temp</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#B392F0;">a_bool:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a_str:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;I&#39;m true&quot;}</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#B392F0;">a_bool:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a_str:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;I&#39;m false&quot;}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cargo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6F42C1;">Compiling</span><span style="color:#24292E;"> </span><span style="color:#032F62;">temp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">v0.1.0</span><span style="color:#24292E;"> (/home/gong/rust-work/temp)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Finished</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dev</span><span style="color:#24292E;"> [unoptimized </span><span style="color:#032F62;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">debuginfo]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">target</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">s</span><span style="color:#24292E;">) </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2.26</span><span style="color:#032F62;">s</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6F42C1;">Running</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span><span style="color:#6F42C1;">target/debug/temp</span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#6F42C1;">a_bool:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a_str:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;I&#39;m true&quot;}</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#6F42C1;">a_bool:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a_str:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;I&#39;m false&quot;}</span></span></code></pre></div><p>查看<code>parquet</code>文件</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cat</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">target/sample.parquet</span></span>
<span class="line"><span style="color:#B392F0;">PAR1,X%a_bool44&lt;X22I</span><span style="color:#B392F0;">&#39;m true     I&#39;</span><span style="color:#B392F0;">m</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#9ECBFF;">,I&#39;m true      I&#39;m</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">                                                                 </span><span style="color:#B392F0;">5a_str��</span><span style="color:#E1E4E8;">&amp;</span><span style="color:#B392F0;">�</span><span style="color:#E1E4E8;">&amp;</span><span style="color:#B392F0;">�I</span><span style="color:#B392F0;">&#39;m true   I&#39;</span><span style="color:#B392F0;">m</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">I&#39;m falsI&#39;m</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tru4�V</span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">H</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#B392F0;">rust_schema%a_bool</span></span>
<span class="line"><span style="color:#E1E4E8;">                       </span><span style="color:#B392F0;">%a_str%L,</span><span style="color:#E1E4E8;">&amp;</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">%a_bool</span><span style="color:#F97583;">44&lt;</span><span style="color:#E1E4E8;">X��</span><span style="color:#9ECBFF;">&quot;&amp;�</span></span>
<span class="line"><span style="color:#9ECBFF;">                                                  5a_str��&amp;�&amp;�I&#39;m true  I&#39;m false��@��(parquet-rs version 46.0.0�PAR1%</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cat</span><span style="color:#24292E;"> </span><span style="color:#032F62;">target/sample.parquet</span></span>
<span class="line"><span style="color:#6F42C1;">PAR1,X%a_bool44&lt;X22I</span><span style="color:#6F42C1;">&#39;m true     I&#39;</span><span style="color:#6F42C1;">m</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#032F62;">,I&#39;m true      I&#39;m</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">                                                                 </span><span style="color:#6F42C1;">5a_str��</span><span style="color:#24292E;">&amp;</span><span style="color:#6F42C1;">�</span><span style="color:#24292E;">&amp;</span><span style="color:#6F42C1;">�I</span><span style="color:#6F42C1;">&#39;m true   I&#39;</span><span style="color:#6F42C1;">m</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">       </span><span style="color:#032F62;">I&#39;m falsI&#39;m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tru4�V</span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">H</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6F42C1;">rust_schema%a_bool</span></span>
<span class="line"><span style="color:#24292E;">                       </span><span style="color:#6F42C1;">%a_str%L,</span><span style="color:#24292E;">&amp;</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">%a_bool</span><span style="color:#D73A49;">44&lt;</span><span style="color:#24292E;">X��</span><span style="color:#032F62;">&quot;&amp;�</span></span>
<span class="line"><span style="color:#032F62;">                                                  5a_str��&amp;�&amp;�I&#39;m true  I&#39;m false��@��(parquet-rs version 46.0.0�PAR1%</span></span></code></pre></div><h2 id="阅读参考" tabindex="-1">阅读参考 <a class="header-anchor" href="#阅读参考" aria-label="Permalink to &quot;阅读参考&quot;">​</a></h2><p><a href="https://parquet.apache.org/docs/overview/" target="_blank" rel="noreferrer"><code>Apache parquet document</code></a></p><p><a href="https://zhuanlan.zhihu.com/p/538163356" target="_blank" rel="noreferrer">详解<code>Parquet</code>文件格式原理</a></p>`,40),t=[e];function c(r,y,E,i,F,d){return a(),n("div",null,t)}const m=s(o,[["render",c]]);export{C as __pageData,m as default};
