import{_ as e,o,c,Q as d}from"./chunks/framework.ec8f7e8e.js";const u=JSON.parse('{"title":"优化器概念","description":"","frontmatter":{},"headers":[],"relativePath":"published/database/数据库优化器与算子.md","filePath":"published/database/数据库优化器与算子.md"}'),a={name:"published/database/数据库优化器与算子.md"},t=d('<h1 id="优化器概念" tabindex="-1">优化器概念 <a class="header-anchor" href="#优化器概念" aria-label="Permalink to &quot;优化器概念&quot;">​</a></h1><p>优化器是数据库中用于把关系表达式转换成执行计划的核心组件，很大程度上决定了一个系统的性能</p><p>优化器会包含一系列优化规则，这些优化规则可以对关系表达式进行等价转换，从而生成执行计划</p><h2 id="优化规则常见逻辑算子" tabindex="-1">优化规则常见逻辑算子 <a class="header-anchor" href="#优化规则常见逻辑算子" aria-label="Permalink to &quot;优化规则常见逻辑算子&quot;">​</a></h2><ul><li><p><code>DataSource</code>：数据源，也就是我们<code>SQL</code>语句中的表，<code>select name from table1</code>中的<code>table1</code></p></li><li><p><code>Selection</code>：选择，<code>Where</code> 条件，如<code>select name from table1 where id = 1</code>中的<code>where</code>后的过滤条件</p></li><li><p><code>Projection</code>：投影，指搜索选择的列，如<code>select name from table1 where id = 1</code>中的列<code>name</code></p></li><li><p><code>Join</code>：连接，如<code>select * from table1 table2 where table1.name=table2.name</code>就是把两个表做<code>Join</code>，连接条件是最简单的等值连接，当然还有其他我们熟知的<code>inner join</code>,<code>left join</code>,<code>right join</code>等等</p></li><li><p><code>Sort</code>：排序，如<code>select * from table1 order by id</code>里面的<code>order by</code>，无序的数据通过这个算子处理后，输出有序的数据</p></li><li><p><code>Aggregation</code>：分组，如<code>select sum(score) from table1 group by name</code>中的<code>group by</code>，按照某些列进行分组，分组后可以进行一些聚合操作，比如<code>Max、Min、Sum、Count、Average</code>等等</p></li><li><p><code>Apply</code>：子查询，如<code>select * from (select id，name from table1) as t</code>中的<code>(select id,name from table1) as t</code>，可以进行嵌套查询</p></li></ul><h2 id="优化规则-谓词下推" tabindex="-1">优化规则-谓词下推 <a class="header-anchor" href="#优化规则-谓词下推" aria-label="Permalink to &quot;优化规则-谓词下推&quot;">​</a></h2><p>将外层查询块<code>where</code>子句中的谓词移入所包含的较低层次的查询块，从而能够提前进行数据过滤以及更好的使用索引</p><h4 id="举例" tabindex="-1">举例 <a class="header-anchor" href="#举例" aria-label="Permalink to &quot;举例&quot;">​</a></h4><p>比如对于表<code>t1</code>（100条数据），<code>t2</code>（100条数据），对于查询语句<code>select * from t1,t2 where t1.a &gt; 3 and t2.b &gt;5</code></p><h4 id="执行" tabindex="-1">执行 <a class="header-anchor" href="#执行" aria-label="Permalink to &quot;执行&quot;">​</a></h4><ul><li>直接执行：执行时候是把<code>t1</code>和<code>t2</code>两个表做笛卡尔积，需要处理10000条数据，然后再根据条件进行过滤</li><li>进行谓词下推：比如<code>t1.a &gt; 3</code>的数据有10条，<code>t2.b &gt; 5</code>的有5条，先进行过滤我们所需要处理的数据条数则只有50条了，这就是尽量把过滤条件往下推到子节点上，就可以避免访问很多数据，从而达到优化的效果</li></ul><h4 id="对于算子的谓词下推" tabindex="-1">对于算子的谓词下推 <a class="header-anchor" href="#对于算子的谓词下推" aria-label="Permalink to &quot;对于算子的谓词下推&quot;">​</a></h4><ul><li><code>DataSource</code>算子，直接将过滤条件推给各个<code>DataSource</code>算子即可</li><li>对于<code>Join</code>算子，则会首先进行简化，将外连接转化为内连接，收集连接条件，区分出哪些来自于<code>Join</code>的左节点哪些来自于<code>Join</code>的右节点，分别像左右节点进行下推</li></ul><h4 id="注意点" tabindex="-1">注意点 <a class="header-anchor" href="#注意点" aria-label="Permalink to &quot;注意点&quot;">​</a></h4><p>不能下推<code>Limit</code>，因为先进行<code>Limit n</code>再做<code>Selection</code>操作和先做<code>Selection</code>操作再<code>Limit n</code>得到的结果是不一样的</p><h2 id="优化规则-列裁剪" tabindex="-1">优化规则-列裁剪 <a class="header-anchor" href="#优化规则-列裁剪" aria-label="Permalink to &quot;优化规则-列裁剪&quot;">​</a></h2><p>对于没用到的列，则没有必要读取它们的数据去浪费无谓的<code>IO</code></p><h4 id="举例-1" tabindex="-1">举例 <a class="header-anchor" href="#举例-1" aria-label="Permalink to &quot;举例&quot;">​</a></h4><p>比如我们有一张表<code>table1</code>，它含有四列数据<code>a,b,c,d</code></p><p>当我们执行查询<code>select a from table1 where c &gt;10</code>时，<code>table1</code>中只有<code>a,c</code>两列被用到了</p><ul><li><p><code>Selection</code>算子用到<code>c</code>列</p></li><li><p><code>Projection</code>算子用到<code>a</code>列</p></li></ul><p>那么<code>DataSource</code>读取数据时，<code>b，d</code>两列则不需要读取，可以裁剪掉</p><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p>列裁剪的算法就是自顶向下的把算子过一遍，某个节点需要用到的列就等于它自己需要用到的列加上它的父节点所需要用到的列，这样得到整个<code>SQL</code>语句所涉及到的列，从而再读取数据时只读取需要的列即可</p><h2 id="优化规则-常量折叠" tabindex="-1">优化规则-常量折叠 <a class="header-anchor" href="#优化规则-常量折叠" aria-label="Permalink to &quot;优化规则-常量折叠&quot;">​</a></h2><p>在编译优化时，多个变量进行计算时，而且能够直接计算出结果，那么变量将由常量直接替换</p><h4 id="举例-2" tabindex="-1">举例 <a class="header-anchor" href="#举例-2" aria-label="Permalink to &quot;举例&quot;">​</a></h4><p>比如<code>select * from table1 where a &gt; 3*5</code>会转换为<code>select * from table1 where a &gt; 15</code></p><h2 id="优化规则-常量传播" tabindex="-1">优化规则-常量传播 <a class="header-anchor" href="#优化规则-常量传播" aria-label="Permalink to &quot;优化规则-常量传播&quot;">​</a></h2><p>常量传播，在编译优化时，将能够计算出结果的变量替换为常量</p><h4 id="实现逻辑" tabindex="-1">实现逻辑 <a class="header-anchor" href="#实现逻辑" aria-label="Permalink to &quot;实现逻辑&quot;">​</a></h4><p>依赖一种叫做<code>到达定值</code>（<code>reaching definition</code>）的前向数据流分析（<code>forward data-flow analysis</code>），要确定某个定值能被传播到哪些使用点，或者反过来说，某个使用点上应该采用哪个版本的定值，如果在某个使用点上发现应该使用的定值是一个常量的话，就可以在此处做诸如常量折叠之类的常量优化了</p><h4 id="举例-3" tabindex="-1">举例 <a class="header-anchor" href="#举例-3" aria-label="Permalink to &quot;举例&quot;">​</a></h4><ul><li><p><code>select * from table1 where a &gt; 5 and a &lt; 4</code></p><p>一看就能看出来，不存在<code>a &gt; 5 &amp;&amp; a &lt; 4</code>的值，但是未经优化的<code>SQL</code>会进行全表扫描查询<code>a &gt; 5</code>和<code>a &lt; 4</code>，这个时候就需要<code>sql</code>优化语句，从而消除无用的节点，判断是否存在结果</p></li><li><p><code>select * from table1 where a = b and b = 3</code></p><p>可以优化为<code>select * from table1 where a = 3 and b = 3</code></p></li></ul><h2 id="优化规则-投影消除" tabindex="-1">优化规则-投影消除 <a class="header-anchor" href="#优化规则-投影消除" aria-label="Permalink to &quot;优化规则-投影消除&quot;">​</a></h2><p>投影消除是把不必要的<code>Projection</code>给消除掉</p><p>如果<code>Projection</code>算子需要投影的列跟子节点的输出列一样，那么这个投影就是一个废操作，可以被消除掉</p><p>举例</p><ul><li><code>select a,b from table1</code> 如果再表<code>table1</code>中刚好只有<code>a，b</code>两列，也就是<code>DataSource</code>的输出和<code>Projection</code>需要投影的列一样，那么这时候就没必要在<code>TableScan</code>之后再做一次<code>Projection</code>操作了</li><li><code>select a from (select a,b,c from table2)</code> 这条语句里面有两个<code>Projection</code>，分别是最上层的<code>Projection(a)</code>和它的子节点<code>Projection(a,b,c)</code>那么<code>Projection(a,b,c)</code>这个节点就是废操作，可以被消除掉如果<code>Projection</code>的子节点还是<code>Projection</code>的话，那么子节点的<code>Projection</code>就没有意义了，可以干掉</li><li><code>Aggregation</code>在某种意义上也属于投影操作，因为从这个节点出来的都是列的概念，比如<code>Max(a)、Min(b)</code>等，因此在<code>Aggregation-&gt;Projection</code>的过程中，这个<code>Projection</code>也是可以被消除掉的</li></ul><h2 id="优化规则-最大最小消除" tabindex="-1">优化规则-最大最小消除 <a class="header-anchor" href="#优化规则-最大最小消除" aria-label="Permalink to &quot;优化规则-最大最小消除&quot;">​</a></h2><p>最大最小消除严格上说不是标准逻辑优化里面需要做的事情</p><p>举例</p><ul><li><p>最小消除：<code>select min(a) from table1</code>生成的逻辑执行计划是一个 <code>TableScan</code> 上面接一个 <code>Aggregation</code>，也就是说这是一个全表扫描的操作</p><p>可以转换为<code>select a from table1 order by a desc limit 1</code>生成的逻辑执行计划是<code>TableScan + Sort + Limit</code>，在某些情况，比如<code>a</code>是主键或者是存在索引，数据本身是有序的， <code>Sort</code> 就可以消除，最终变成 <code>TableScan </code>或者 <code>IndexLookUp</code> 加 <code>Limit</code>，这样子就不需要全表扫了，读到第一条数据就得到结果</p></li><li><p>最大消除<code>select max(id) from table1</code> 优化为<code>select max(id) from (select id from table1 order by id desc limit 1 where id is not null) t</code></p></li><li><p>最小消除: <code>select min(id) from table1</code>优化为<code>select min(id) from (select id from table1 order by id limit 1 where id is not null) table1</code></p></li></ul><h2 id="查询优化器分类" tabindex="-1">查询优化器分类 <a class="header-anchor" href="#查询优化器分类" aria-label="Permalink to &quot;查询优化器分类&quot;">​</a></h2><h4 id="基于规则的优化器-rule-based-optimizer-rbo" tabindex="-1">基于规则的优化器(<code>Rule-Based Optimizer，RBO</code>) <a class="header-anchor" href="#基于规则的优化器-rule-based-optimizer-rbo" aria-label="Permalink to &quot;基于规则的优化器(`Rule-Based Optimizer，RBO`)&quot;">​</a></h4><p>根据优化规则对关系表达式进行转换，一个关系表达式经过优化规则后会变成另外一个关系表达式，同时原有表达式会被裁剪掉，经过一系列转换后生成最终的执行计划</p><p><code>RBO</code>中包含了一套有着严格顺序的优化规则，同样一条<code>SQL</code>，无论读取的表中数据是怎么样的，最后生成的执行计划都是一样的</p><p>在<code>RBO</code>中<code>SQL</code>写法的不同很有可能影响最终的执行计划，从而影响脚本性能</p><p>执行过程</p><ol><li><p><code>Transformation</code></p><p>遍历关系表达式，只要模式能够满足特定优化规则就进行转换，生成了一个逻辑执行计划，但这只是逻辑上可行</p></li><li><p><code>Build Physical Plan</code></p><p>将逻辑执行计划<code>build</code>成物理执行计划，即决定各个<code>Operator</code>的具体实现，如<code>Join</code>算子的具体实现选择</p></li></ol><h4 id="基于代价的优化器-cost-based-optimizer-cbo" tabindex="-1">基于代价的优化器(<code>Cost-Based Optimizer，CBO</code>) <a class="header-anchor" href="#基于代价的优化器-cost-based-optimizer-cbo" aria-label="Permalink to &quot;基于代价的优化器(`Cost-Based Optimizer，CBO`)&quot;">​</a></h4><p>根据优化规则对关系表达式进行转换，一个关系表达式经过优化规则后会生成另外一个关系表达式，同时原有表达式也会保留，经过一系列转换后会生成多个执行计划，然后<code>CBO</code>会根据统计信息和代价模型(<code>Cost Model</code>)计算每个执行计划的<code>Cost</code>，从中挑选<code>Cost</code>最小的执行计划</p><p><code>CBO</code>中有两个依赖：统计信息和代价模型，统计信息的准确与否、代价模型的合理与否都会影响<code>CBO</code>选择最优计划</p><p>执行过程</p><ol><li><code>Exploration</code> 根据优化规则进行等价转换，生成等价关系表达式，此时原有关系表达式会被保留</li><li><code>Build Physical Plan</code> 决定各个<code>Operator</code>的具体实现</li><li><code>Find Best Plan</code> 根据统计信息计算各个执行计划的<code>Cost</code>，选择<code>Cost</code>最小的执行计划</li></ol><h4 id="cbo优于rbo的原因" tabindex="-1"><code>CBO</code>优于<code>RBO</code>的原因 <a class="header-anchor" href="#cbo优于rbo的原因" aria-label="Permalink to &quot;`CBO`优于`RBO`的原因&quot;">​</a></h4><p><code>RBO</code>是一种只认规则，对数据不敏感的呆板的优化器，而在实际过程中，数据往往是有变化的，通过<code>RBO</code>生成的执行计划很有可能不是最优的</p><p>目前各大数据库和大数据计算引擎都倾向于使用<code>CBO</code>，例如<code>Oracle、Hive、Spark、Flink</code>等等</p><h2 id="阅读参考" tabindex="-1">阅读参考 <a class="header-anchor" href="#阅读参考" aria-label="Permalink to &quot;阅读参考&quot;">​</a></h2><p><a href="https://zhuanlan.zhihu.com/p/40478975" target="_blank" rel="noreferrer"><code>SQL</code>优化器原理——查询优化器综述</a></p><p><a href="https://www.modb.pro/db/132763" target="_blank" rel="noreferrer"><code>SQL</code>优化之谓词下推和常量优化</a></p><p><a href="https://www.imooc.com/article/278660" target="_blank" rel="noreferrer"><code>SQL</code>优化器执行过程之逻辑算子</a></p>',62),l=[t];function r(i,n,h,p,s,b){return o(),c("div",null,l)}const f=e(a,[["render",r]]);export{u as __pageData,f as default};
